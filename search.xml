<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Pseudo Distributed Hbase Install</title>
      <link href="/post/2018/10/26/pseudo-distributed-hbase-install/"/>
      <url>/post/2018/10/26/pseudo-distributed-hbase-install/</url>
      
        <content type="html"><![CDATA[<h2 id="一-环境准备"><a href="#一-环境准备" class="headerlink" title="一 环境准备"></a>一 环境准备</h2><h3 id="1-Ubuntu、JDK8、Hadoop2-8-5、HBase2-1-0"><a href="#1-Ubuntu、JDK8、Hadoop2-8-5、HBase2-1-0" class="headerlink" title="1. Ubuntu、JDK8、Hadoop2.8.5、HBase2.1.0"></a>1. Ubuntu、JDK8、Hadoop2.8.5、HBase2.1.0</h3><p>   <a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">安装Ubuntu https://www.ubuntu.com/download/desktop</a>;<br>   <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">安装JDK,修改环境变量 https://www.oracle.com/technetwork/java/javase/downloads/index.html</a>;<br>   <a href="http://hadoop.apache.org/" target="_blank" rel="noopener">安装Hadoop2.8.5 http://hadoop.apache.org/</a><br>   <a href="http://hbase.apache.org/" target="_blank" rel="noopener">下载HBase2.1.0 http://hbase.apache.org/</a></p><h3 id="2-其他准备"><a href="#2-其他准备" class="headerlink" title="2. 其他准备"></a>2. 其他准备</h3><p>   部署Hadoop详见: <a href="https://dsolvers.github.io/2018/10/26/pseudo-distributed-hadoop-install/">Hadoop 伪分布式部署</a></p><h2 id="二-部署HBase"><a href="#二-部署HBase" class="headerlink" title="二 部署HBase"></a>二 部署HBase</h2><h3 id="1-解压HBase"><a href="#1-解压HBase" class="headerlink" title="1. 解压HBase"></a>1. 解压HBase</h3><pre><code class="bash">      cd ~      sudo tar -zxf ~/Downloads/hbase-2.1.0-bin.tar.gz -C /usr/local # 解压到/usr/local中      cd /usr/local/                                                    chmod -R 777 ./hbase-2.1.0                                     # 设置权限</code></pre><h3 id="2-配置HBase环境变量"><a href="#2-配置HBase环境变量" class="headerlink" title="2. 配置HBase环境变量"></a>2. 配置HBase环境变量</h3><pre><code class="bash">      export HBASE_HOME=//usr/local/hbase-2.1.0      export HBASE_CONF_DIR=${HBASE_HOME}/conf      export HBASE_CLASS_PATH=${HBASE_CONF_DIR}      export PATH=$PATH:${HBASE_HOME}/bin</code></pre><h3 id="3-修改环境-HBASE-HOME-conf-hbase-evn-sh配置"><a href="#3-修改环境-HBASE-HOME-conf-hbase-evn-sh配置" class="headerlink" title="3. 修改环境${HBASE_HOME}/conf/hbase-evn.sh配置"></a>3. 修改环境${HBASE_HOME}/conf/hbase-evn.sh配置</h3><pre><code class="bash">      # 增加以下配置      export JAVA_HOME=/usr/local/jdk1.8.0_181  # JDK根目录      export HBASE_MANAGES_ZK=true              # 使用HBase自带zookeeper</code></pre><h3 id="4-修改配置文件-HBASE-HOME-conf-hbase-site-xml"><a href="#4-修改配置文件-HBASE-HOME-conf-hbase-site-xml" class="headerlink" title="4. 修改配置文件${HBASE_HOME}/conf/hbase-site.xml"></a>4. 修改配置文件${HBASE_HOME}/conf/hbase-site.xml</h3><pre><code class="xml">      &lt;configuration&gt;          &lt;property&gt;              &lt;name&gt;hbase.rootdir&lt;/name&gt;              &lt;value&gt;hdfs://crab2died:9000&lt;/value&gt;          &lt;/property&gt;          &lt;property&gt;               &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;              &lt;value&gt;true&lt;/value&gt;           &lt;/property&gt;      &lt;/configuration&gt;</code></pre><h3 id="5-修改文件-HBASE-HOME-conf-regionservers"><a href="#5-修改文件-HBASE-HOME-conf-regionservers" class="headerlink" title="5. 修改文件${HBASE_HOME}/conf/regionservers"></a>5. 修改文件${HBASE_HOME}/conf/regionservers</h3><p>   将<code>localhost</code>改为<code>crab2died</code></p><h3 id="6-解决HBase-master启动错误"><a href="#6-解决HBase-master启动错误" class="headerlink" title="6. 解决HBase master启动错误"></a>6. 解决HBase master启动错误</h3><pre><code class="bash">      # 执行cp       cd /usr/local/hbase-2.1.0      cp ./lib/client-facing-thirdparty/htrace-core-3.1.0-incubating.jar ./lib</code></pre><h3 id="7-验证版本"><a href="#7-验证版本" class="headerlink" title="7. 验证版本"></a>7. 验证版本</h3><pre><code class="bash">      hbase version      # 成功则会返回版本信息</code></pre><h2 id="三-启动HBase"><a href="#三-启动HBase" class="headerlink" title="三 启动HBase"></a>三 启动HBase</h2><h3 id="1-先启动Hadoop-详见-Hadoop-伪分布式部署"><a href="#1-先启动Hadoop-详见-Hadoop-伪分布式部署" class="headerlink" title="1. 先启动Hadoop,详见: Hadoop 伪分布式部署"></a>1. 先启动Hadoop,详见: <a href="https://dsolvers.github.io/2018/10/26/pseudo-distributed-hadoop-install/">Hadoop 伪分布式部署</a></h3><h3 id="2-启动HBase"><a href="#2-启动HBase" class="headerlink" title="2. 启动HBase"></a>2. 启动HBase</h3><pre><code class="bash">      start-hbase.sh </code></pre><h3 id="3-jps查看进程"><a href="#3-jps查看进程" class="headerlink" title="3. jps查看进程"></a>3. jps查看进程</h3><pre><code class="bash">      jps      1257 HQuorumPeer      1285 HMaster      1312 HRegionServer</code></pre><h3 id="4-查看HBase管理界面"><a href="#4-查看HBase管理界面" class="headerlink" title="4. 查看HBase管理界面:"></a>4. 查看HBase管理界面:</h3><p>   <a href="http://crab2died:16030" target="_blank" rel="noopener">http://crab2died:16030</a></p><h3 id="5-进入命令行管理"><a href="#5-进入命令行管理" class="headerlink" title="5. 进入命令行管理:"></a>5. 进入命令行管理:</h3><pre><code class="bash">      hbase shell</code></pre>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Big Data </tag>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pseudo Distributed Hadoop Install</title>
      <link href="/post/2018/10/26/pseudo-distributed-hadoop-install/"/>
      <url>/post/2018/10/26/pseudo-distributed-hadoop-install/</url>
      
        <content type="html"><![CDATA[<h2 id="一-环境准备"><a href="#一-环境准备" class="headerlink" title="一 环境准备"></a>一 环境准备</h2><h3 id="准备Ubuntu、JDK8、Hadoop2-8-5"><a href="#准备Ubuntu、JDK8、Hadoop2-8-5" class="headerlink" title="准备Ubuntu、JDK8、Hadoop2.8.5"></a>准备Ubuntu、JDK8、Hadoop2.8.5</h3><p>   <a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">安装Ubuntu https://www.ubuntu.com/download/desktop</a><br>   <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">安装JDK,修改环境变量 https://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>   <a href="http://hadoop.apache.org/" target="_blank" rel="noopener">下载Hadoop2.8.5 http://hadoop.apache.org/</a></p><h3 id="其他准备"><a href="#其他准备" class="headerlink" title="其他准备"></a>其他准备</h3><h4 id="1-更新apt-sudo-apt-get-update"><a href="#1-更新apt-sudo-apt-get-update" class="headerlink" title="1. 更新apt sudo apt-get update"></a>1. 更新apt <code>sudo apt-get update</code></h4><h4 id="2-SSH安装，配置无密码SSH登入"><a href="#2-SSH安装，配置无密码SSH登入" class="headerlink" title="2. SSH安装，配置无密码SSH登入"></a>2. SSH安装，配置无密码SSH登入</h4><h5 id="2-1-SSH安装-sudo-apt-get-install-openssh-server"><a href="#2-1-SSH安装-sudo-apt-get-install-openssh-server" class="headerlink" title="2.1 SSH安装 sudo apt-get install openssh-server"></a>2.1 SSH安装 <code>sudo apt-get install openssh-server</code></h5><h5 id="2-2-配置SSH无密码登入"><a href="#2-2-配置SSH无密码登入" class="headerlink" title="2.2 配置SSH无密码登入"></a>2.2 配置SSH无密码登入</h5><pre><code class="bash">     cd ~/.ssh/                            # 若没有该目录，请先执行一次ssh crab2died     ssh-keygen -t rsa                     # 会有提示，都按回车就可以     cat ./id_rsa.pub &gt;&gt; ./authorized_keys # 加入授权     ssh crab2died                         # 验证无密码登入</code></pre><h4 id="3-修改hosts"><a href="#3-修改hosts" class="headerlink" title="3. 修改hosts"></a>3. 修改hosts</h4><pre><code class="bash">     sudo vi /etc/hosts     # 添加      本机ip   crab2died</code></pre><h2 id="二-安装Hadoop"><a href="#二-安装Hadoop" class="headerlink" title="二 安装Hadoop"></a>二 安装Hadoop</h2><h3 id="1-解压Hadoop"><a href="#1-解压Hadoop" class="headerlink" title="1. 解压Hadoop"></a>1. 解压Hadoop</h3><pre><code class="bash">     cd ~     sudo tar -zxf ~/Downloads/hadoop-2.8.5.tar.gz -C /usr/local # 解压到/usr/local中     cd /usr/local/                                                   chmod -R 777 ./hadoop-2.8.5                                 # 设置权限</code></pre><h3 id="2-设置Hadoop环境变量"><a href="#2-设置Hadoop环境变量" class="headerlink" title="2. 设置Hadoop环境变量"></a>2. 设置Hadoop环境变量</h3><pre><code class="bash">     sudo vi /etc/profile     # 添加     export HADOOP_HOME=/usr/local/hadoop-2.8.5      export PATH=$PATH:${HADOOP_HOME}/sbin:${HADOOP_HOME}/bin     # 保存执行     source /etc/profile</code></pre><h3 id="3-验证Hadoop版本"><a href="#3-验证Hadoop版本" class="headerlink" title="3. 验证Hadoop版本"></a>3. 验证Hadoop版本</h3><pre><code class="bash">     hadoop version    # 成功会返回版本信息</code></pre><h3 id="4-伪分布式配置"><a href="#4-伪分布式配置" class="headerlink" title="4. 伪分布式配置"></a>4. 伪分布式配置</h3><h4 id="4-1-进入-HADOOP-HOME-etc-hadoop目录中，修改以下文件"><a href="#4-1-进入-HADOOP-HOME-etc-hadoop目录中，修改以下文件" class="headerlink" title="4.1 进入${HADOOP_HOME}/etc/hadoop目录中，修改以下文件"></a>4.1 进入<code>${HADOOP_HOME}/etc/hadoop</code>目录中，修改以下文件</h4><h5 id="4-1-1-修改-hadoop-env-sh"><a href="#4-1-1-修改-hadoop-env-sh" class="headerlink" title="4.1.1 修改 hadoop-env.sh"></a>4.1.1 修改 hadoop-env.sh</h5><pre><code>  将`export JAVA_HOME=${JAVA_HOME}`改成`export JAVA_HOME=/usr/local/jdk1.8.0_181  # JDK根目录`</code></pre><h5 id="4-1-2-修改-core-site-xml"><a href="#4-1-2-修改-core-site-xml" class="headerlink" title="4.1.2 修改 core-site.xml"></a>4.1.2 修改 core-site.xml</h5><pre><code class="xml">     &lt;configuration&gt;         &lt;property&gt;             &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;             &lt;value&gt;file:/home/crab2died/hadoop/tmp&lt;/value&gt;             &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;         &lt;/property&gt;         &lt;property&gt;             &lt;name&gt;fs.defaultFS&lt;/name&gt;             &lt;value&gt;hdfs://crab2died:9000&lt;/value&gt;         &lt;/property&gt;     &lt;/configuration&gt;</code></pre><h5 id="4-1-3-修改-hdfs-site-xml"><a href="#4-1-3-修改-hdfs-site-xml" class="headerlink" title="4.1.3 修改 hdfs-site.xml"></a>4.1.3 修改 hdfs-site.xml</h5><pre><code class="xml">     &lt;configuration&gt;        &lt;property&gt;            &lt;name&gt;dfs.nameservices&lt;/name&gt;            &lt;value&gt;hadoop-cluster&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;            &lt;name&gt;dfs.replication&lt;/name&gt;            &lt;value&gt;1&lt;/value&gt;        &lt;/property&gt;              &lt;property&gt;            &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;            &lt;value&gt;file:/home/crab2died/hadoop/hdfs/nn&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;            &lt;name&gt;dfs.namenode.checkpoint.dir&lt;/name&gt;            &lt;value&gt;file:/home/crab2died/hadoop/hdfs/snn&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;            &lt;name&gt;dfs.namenode.checkpoint.edits.dir&lt;/name&gt;            &lt;value&gt;file:/home/crab2died/hadoop/hdfs/snn&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;            &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;            &lt;value&gt;file:/home/crab2died/hadoop/hdfs/dn&lt;/value&gt;        &lt;/property&gt;     &lt;/configuration&gt;</code></pre><h5 id="4-1-4-先复制cp-mapred-site-xml-template-mapred-site-xml-再修改-mapred-site-xml"><a href="#4-1-4-先复制cp-mapred-site-xml-template-mapred-site-xml-再修改-mapred-site-xml" class="headerlink" title="4.1.4 先复制cp mapred-site.xml.template mapred-site.xml,再修改 mapred-site.xml"></a>4.1.4 先复制<code>cp mapred-site.xml.template mapred-site.xml</code>,再修改 mapred-site.xml</h5><pre><code class="xml">     &lt;configuration&gt;         &lt;property&gt;              &lt;name&gt;mapreduce.framework.name&lt;/name&gt;              &lt;value&gt;yarn&lt;/value&gt;         &lt;/property&gt;     &lt;/configuration&gt;</code></pre><h5 id="4-1-5-修改-yarn-site-xml"><a href="#4-1-5-修改-yarn-site-xml" class="headerlink" title="4.1.5 修改 yarn-site.xml"></a>4.1.5 修改 yarn-site.xml</h5><pre><code class="xml">     &lt;configuration&gt;        &lt;property&gt;            &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;            &lt;value&gt;crab2died&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;            &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;            &lt;value&gt;mapreduce_shuffle&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;            &lt;name&gt;yarn.nodemanager.local-dirs&lt;/name&gt;            &lt;value&gt;file:/home/crab2died/hadoop/yarn/nm&lt;/value&gt;        &lt;/property&gt;     &lt;/configuration&gt;</code></pre><h3 id="5-格式化HDFS-NameNode"><a href="#5-格式化HDFS-NameNode" class="headerlink" title="5. 格式化HDFS NameNode"></a>5. 格式化HDFS NameNode</h3><pre><code class="bash">     hdfs namenode -format</code></pre><h3 id="6-启动集群"><a href="#6-启动集群" class="headerlink" title="6. 启动集群"></a>6. 启动集群</h3><h4 id="6-1-启动HDFS集群"><a href="#6-1-启动HDFS集群" class="headerlink" title="6.1 启动HDFS集群"></a>6.1 启动HDFS集群</h4><pre><code class="bash">     hadoop-daemon.sh start namenode     hadoop-daemon.sh start datanode     hadoop-daemon.sh start secondarynamenode  # 伪分布式才有</code></pre><h4 id="6-2-启动YARN"><a href="#6-2-启动YARN" class="headerlink" title="6.2 启动YARN"></a>6.2 启动YARN</h4><pre><code class="bash">     yarn-daemon.sh start resourcemanager     yarn-daemon.sh start nodemanager</code></pre><h3 id="7-jps查看进程"><a href="#7-jps查看进程" class="headerlink" title="7. jps查看进程"></a>7. jps查看进程</h3><pre><code class="bash">     jps     1213 NameNOde     1261 NodeManager     1521 ResourceManager     1722 DataNode     1732 SecondrayNameNode     </code></pre><h3 id="8-查看HDFS管理界面"><a href="#8-查看HDFS管理界面" class="headerlink" title="8. 查看HDFS管理界面:"></a>8. 查看HDFS管理界面:</h3><p>   <a href="http://crab2died:50070" target="_blank" rel="noopener">http://crab2died:50070</a></p><h3 id="9-查看YARN管理界面"><a href="#9-查看YARN管理界面" class="headerlink" title="9. 查看YARN管理界面:"></a>9. 查看YARN管理界面:</h3><p>   <a href="http://crab2died:8088" target="_blank" rel="noopener">http://crab2died:8088</a></p>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Big Data </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RESTful HTTP</title>
      <link href="/post/2018/06/27/restful-http/"/>
      <url>/post/2018/06/27/restful-http/</url>
      
        <content type="html"><![CDATA[<h2 id="一-REST由来"><a href="#一-REST由来" class="headerlink" title="一 REST由来"></a>一 REST由来</h2><ol><li>REST(Representational State Transfer 表征性状态转移)</li><li>2000年Roy Fielding的博士论文中首次提出</li><li>REST是架构风格，是设计思想，不是标准也不是协议</li><li>REST强调组件交互的可伸缩性、接口的通用性、组件的独立部署、以及用来减少交互延迟、增强安全性、封装遗留系统的中间组件</li></ol><h2 id="二-REST特点"><a href="#二-REST特点" class="headerlink" title="二 REST特点"></a>二 REST特点</h2><ol><li>服务端(server)与客户端(client)解耦<ul><li>简化服务端的可伸缩性，提高客户端便捷性</li></ul></li><li>面向资源，每一个资源都有唯一(CRUD等操作不会变)的标识符</li><li>无状态(Stateless)，请求必须包含所有处理该请求的全部信息<ul><li>提高可见性，每个请求都是独立的，无需其他依赖的</li><li>提高可靠性，故障恢复更容易</li><li>提升扩展性，减少了服务器资源消耗</li></ul></li><li>可缓存(Cachable)<ul><li>减少交互次数，减少网络延时</li></ul></li><li>分层系统(Layered System)<ul><li>允许Client与Server中间层(代理，网关等)代替Server端处理请求，客户端无需关心与他交互组件的其他之外的事</li><li>提高了系统可扩展性，简化系统复杂度</li></ul></li><li>统一接口(Uniform Interface)<ul><li>服务端与客户端统一化的方法(GET/PUT/POST/DELETE)通信</li><li>提高了接口的可见性</li></ul></li><li>按需代码(Code-On-Demand)<ul><li>提升系统可扩展性</li></ul></li></ol><h2 id="三-为什么要遵循REST"><a href="#三-为什么要遵循REST" class="headerlink" title="三 为什么要遵循REST"></a>三 为什么要遵循REST</h2><ol><li>可更高效利用缓存来提高响应速度</li><li>通讯本身的无状态性可以让不同的服务器的处理一系列请求中的不同请求，提高服务器的扩展性</li><li>浏览器即可作为客户端，简化软件需求</li><li>相对于其他叠加在HTTP协议之上的机制，REST的软件依赖性更小</li><li>不需要额外的资源发现机制</li><li>在软件技术演进中的长期的兼容性更好</li></ol><h2 id="四-RESTful最佳实践"><a href="#四-RESTful最佳实践" class="headerlink" title="四 RESTful最佳实践"></a>四 RESTful最佳实践</h2><ol><li>URI规则<ul><li>版本化(其一)   如: /api/v1</li><li>使用名词，而不是动词  如: blog</li><li>使用小写，用 _做词连接，而不用-</li><li>表示资源集合时，使用复数形式     如: blogs</li><li>子资源关系表示   示例: /blog/100/comments</li><li>为减少URI层级深度,引入适当的参数查询</li></ul></li><li>Request Method  (资源的CRUD)<ul><li>GET/HEAD : 查询资源<ul><li>GET /blog/100</li><li>GET /blog/100/comments</li></ul></li><li>POST: 创建资源<ul><li>POST /blog</li><li>POST /blog/100/comment</li></ul></li><li>PUT/PATCH: 更新资源<ul><li>PUT /blog/100</li><li>PUT /blog/100/comment/1</li></ul></li><li>DELETE: 删除资源<ul><li>DELETE /blog/100</li><li>DELETE /blog/100/comment/1</li></ul></li></ul></li><li>Response<ul><li>一般地，返回JSON数据而不是XML</li><li>不过滤API返回的空格，支持gzip/deflate压缩,Content-Encoding: gzip/deflate</li><li>统一的返回格式，错误码信息等</li><li>常见HTTP status<ul><li><strong>200   OK</strong> - 对成功的GET、PUT、PATCH或DELETE操作进行响应。也可以被用在不创建新资源的POST操作上</li><li><strong>201   Created</strong> - 对创建新资源的POST操作进行响应。应该带着指向新资源地址的Location header</li><li><strong>204   No Content</strong> - 对不会返回响应体的成功请求进行响应（比如DELETE请求）</li><li><strong>304   Not Modified</strong> - HTTP缓存header生效的时候用</li><li><strong>400   Bad Request</strong> - 请求异常，比如请求中的body无法解析</li><li><strong>401   Unauthorized</strong> - 没有进行认证或者认证非法。当API通过浏览器访问的时候，可以用来弹出一个认证对话框</li><li><strong>403   Forbidden</strong> - 当认证成功，但是认证过的用户没有访问资源的权限</li><li><strong>404   Not Found</strong> - 当一个不存在的资源被请求</li><li><strong>405   Method Not Allowed</strong> - 所请求的HTTP方法不允许当前认证用户访问</li><li><strong>410   Gone</strong> - 表示当前请求的资源不再可用。当调用老版本API的时候很有用</li><li><strong>415   Unsupported Media Type</strong> - 如果请求中的内容类型是错误的</li><li><strong>422   Unprocessable Entity</strong> - 用来表示校验错误</li><li><strong>429   Too Many Requests</strong> - 由于请求频次达到上限而被拒绝访问</li></ul></li></ul></li><li>认证<ul><li>RESTful API无状态的，每个请求都要自带凭证。</li><li>使用基于SSL来保证传输安全的OAauth 2</li></ul></li><li>缓存<ul><li>强制缓存<ul><li><strong>Cache-Control</strong>与<strong>Expires</strong></li></ul></li><li>比对缓存<ul><li>1、<strong>Last-Modified</strong>与<strong>If-Modified-Since</strong></li><li>2、<strong>Etag</strong>与<strong>If-None-Match</strong></li></ul></li></ul></li><li>HATEOAS (Hypermedia as the Engine of Application State)<ul><li>超媒体作为应用状态的引擎，即在返回结果中提供链接,指向其他API,为用户调用提供指引信息。如: 当调用<a href="http://api.blog.com" target="_blank" rel="noopener">http://api.blog.com</a> 时返回<pre><code class="json">{    &quot;link&quot;: {        &quot;rel&quot;: &quot;collection https://www.blog.com/blogs&quot;,        &quot;href&quot;: &quot;https://api.blog.com/blogs&quot;,        &quot;title&quot;: &quot;List of blogs&quot;,        &quot;type&quot;: &quot;application/vnd.yourformat+json&quot;    }}</code></pre>rel 表示与该API的关系，href表示指引API的链接，title表示API的标题，type表示接受类型</li></ul></li><li>HTTP Request Method覆盖<ul><li>一些老的HTTP Client只支持GET、POST请求，为了兼容这些Client，API需要覆盖HTTP方法，一般做法是HTTP POST请求会有一个<br><strong>X-HTTP-Method-Override</strong>请求头，其值为PUT,PATCH,DELETE之一,以此兼容请求。</li></ul></li><li>限制速度<ul><li>避免请求泛滥，HTTP引入状态码429(Too Many Requests)</li><li>一般地，是返回头信息(依照twitter的命名规则)<ul><li><strong>X-Rate-Limit-Limit</strong>: 当前时间段允许的并发请求数</li><li><strong>X-Rate-Limit-Remaining</strong>: 当前时间段保留的请求数。</li><li><strong>X-Rate-Limit-Reset</strong>: 重置时间(秒)</li><li><strong>Retry-After</strong>: 下一次访问应该等待的时间(秒)</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REST </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis Cache Summarize</title>
      <link href="/post/2018/06/26/redis-cache-summarize/"/>
      <url>/post/2018/06/26/redis-cache-summarize/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ul><li>Redis全称: Remote Dictionary Server</li><li>基于内存的Key-Value存储系统，单线程实现  </li><li>多样的数据类型，支持的数据类型有：string(字符串)、hash(哈希)、list(链表)、set(集合)、zset(sorted set有序集合) </li><li>redis的value大小可达到1GB(memcach只能达到1MB)</li><li>持久化，redis会周期性的将更新的数据写入磁盘  </li><li>master-slave(主从)同步  </li><li>3.0后支持分布式存储，去中心化，具有线性伸缩功能</li><li><a href="http://redisdoc.com/index.html" target="_blank" rel="noopener">Redis命令大全</a></li></ul><h2 id="2-Redis数据持久化"><a href="#2-Redis数据持久化" class="headerlink" title="2. Redis数据持久化"></a>2. Redis数据持久化</h2><h3 id="2-1-RDB-Redis-DataBase"><a href="#2-1-RDB-Redis-DataBase" class="headerlink" title="2.1 RDB(Redis DataBase)"></a>2.1 RDB(Redis DataBase)</h3><ul><li>SNAPSHOT(快照): <code>save 秒数 写操作次数</code>如<code>save 9000 1</code>表示900s(15min)有一次写操作生成快照，也可<code>save &quot;&quot;</code>表示<br>每次写操作即生成快照</li><li>配置<code>stop-writes-on-bgsave-error yes/no</code>当后台生成快照错误是否中断redis写操作的支持</li><li>配置<code>rdbcompression yes/no</code>表示是否压缩RDB文件</li><li>每次会fork一份来重启另一个进程进行持久化</li></ul><h3 id="2-2-AOF-Append-Only-File"><a href="#2-2-AOF-Append-Only-File" class="headerlink" title="2.2 AOF(Append Only File)"></a>2.2 AOF(Append Only File)</h3><ul><li>配置<code>appendonly no/yes</code>启用AOF，启动时会触发全量写文件，后面写操作是增量写文件</li><li>同步策略配置<code>appendfsync always(每次写操作都触发同步)/everysec(每秒同步一次)/no(不同步)</code></li><li>重写(rewrite): 满足条件后触发重写，会对AOF文件内容优化，减少文件大小<br><strong>auto-aof-rewrite-percentage 100 (表示超过文件的百分比)</strong><br><strong>auto-aof-rewrite-min-size 64mb (触发重写的最小文件大小)</strong></li><li>AOF文件修复: <code>redis-check-aof --fix appendonly.aof</code></li></ul><h3 id="2-3-比较"><a href="#2-3-比较" class="headerlink" title="2.3 比较"></a>2.3 比较</h3><ul><li>RDB安全性较差、容易丢失最近一次缓存内容，但文件较小，恢复速度较快，是Master/Slave主从复制模式下的最好补充</li><li>AOF更加安全、数据的完整性较强、但文件较大、恢复速度较慢，IO开支较大，比较影响性能</li><li>Redis启用默认是脚在AOF文件恢复数据</li></ul><h3 id="2-4-缓存驱逐策略"><a href="#2-4-缓存驱逐策略" class="headerlink" title="2.4 缓存驱逐策略"></a>2.4 缓存驱逐策略</h3><ul><li><strong>volatile-lru</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li><strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li><li><strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li><li><strong>allkeys-lru</strong>：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li><li><strong>allkeys-random</strong>：从数据集（server.db[i].dict）中任意选择数据淘汰</li><li><strong>no-enviction</strong>：禁止驱逐数据</li></ul><h2 id="3-Redis集群"><a href="#3-Redis集群" class="headerlink" title="3. Redis集群"></a>3. Redis集群</h2><h3 id="3-1-分片策略"><a href="#3-1-分片策略" class="headerlink" title="3.1 分片策略"></a>3.1 分片策略</h3><ul><li>Redis集群被分为16384(2<sup>14</sup>)个hash slot(hash槽)，集群内每个节点都拥有部分hash槽，使用数据键的CRC16编码对16384取模来<br>计算数据对应的hash槽，Redis最大节点数为16384</li><li>Redis集群新增节点只用把集群中每个节点的部分hash槽移动到新节点中即可</li><li>Redis集群移除节点也只用把该节点的hash槽移动到其他节点即可</li><li>Redis集群之间是异步复制</li></ul><h3 id="3-2-架构分析"><a href="#3-2-架构分析" class="headerlink" title="3.2 架构分析"></a>3.2 架构分析</h3><ul><li>所有的redis节点彼此互联(PING-PONG 机制),内部使用二进制协议优化传输速度和带宽.</li><li>节点的fail是通过集群中超过半数的节点检测失效时才生效  </li><li>客户端与redis节点直连,不需要中间proxy层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可        </li></ul>]]></content>
      
      
      <categories>
          
          <category> Cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cache </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Classloader</title>
      <link href="/post/2018/06/25/java-classloader/"/>
      <url>/post/2018/06/25/java-classloader/</url>
      
        <content type="html"><![CDATA[<h2 id="1-类加载时机"><a href="#1-类加载时机" class="headerlink" title="1. 类加载时机"></a>1. 类加载时机</h2><h3 id="1-1-生命周期"><a href="#1-1-生命周期" class="headerlink" title="1.1 - 生命周期"></a>1.1 - 生命周期</h3><pre><code>                      +-------------------------连接(Linking)----------------------------+   加载(Loading) --&gt;  |  验证(Verification) --&gt; 准备(Preparation) --&gt; 解析(Resolution)   |                      +------------------------------------------------------------------+                                                                            ↓                                卸载(Unloading) &lt;-- 使用(Using) &lt;-- 初始化(Initialization)</code></pre><h3 id="1-2-立即初始化-主动引用"><a href="#1-2-立即初始化-主动引用" class="headerlink" title="1.2 - 立即初始化(主动引用)"></a>1.2 - 立即初始化(主动引用)</h3><ol><li>遇到<code>new</code>、 <code>getstatic</code>、 <code>putstatic</code>或<code>invokestatic</code>这4条字节码指令时</li><li>使用<code>java.lang.reflect</code>包的方法对类进行反射调用的时候,如果类没有进行过初始化,则需要先触发其初始化.</li><li>当初始化一个类的时候,如果发现其父类还没有进行过初始化,则需要先触发其父类的初始化.</li><li>当虚拟机启动时,用户需要指定一个要执行的主类(包含<code>main()</code>方法的那个类),虚拟机会先初始化这个主类.</li><li>当使用JDK 1.7的动态语言支持时,如果一个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果<strong>REF_getStatic</strong>、<br><strong>REF_putStatic</strong>、<strong>REF_invokeStatic</strong>的方法句柄,并且这个方法句柄所对应的类没有进行过初始化,则需要先触发其初始化.</li></ol><h3 id="1-3-被动加载"><a href="#1-3-被动加载" class="headerlink" title="1.3 - 被动加载"></a>1.3 - 被动加载</h3><ol><li>子类调用父类静态方法,子类不会被初始化</li><li>引用类型定义不初始化加载</li><li>常量调用不会初始化类(编译期已进入常量池)</li></ol><h3 id="1-4-接口初始化"><a href="#1-4-接口初始化" class="headerlink" title="1.4 - 接口初始化"></a>1.4 - 接口初始化</h3><p>   &emsp;&emsp;当一个类在初始化时,要求其父类全部都已经初始化过了,但是一个接口在初始化时,并不要求其父接口全部都完成了初始化,<br>   只有在真正使用到父接口的时候(如引用接口中定义的常量)才会初始化.</p><h2 id="2-类加载过程"><a href="#2-类加载过程" class="headerlink" title="2. 类加载过程"></a>2. 类加载过程</h2><h3 id="2-2-加载"><a href="#2-2-加载" class="headerlink" title="2.2 - 加载"></a>2.2 - 加载</h3><ol><li>通过一个类的全限定名来获取定义此类的二进制字节流(这一条玩出了很多技术,如:jsp(从其他文件中生成),Applet(从网络中获取),Proxy(运行时计算)).</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构.</li><li>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象,作为方法区这个类的各种数据的访问入口.<br><strong>_<br>注:<br>加载阶段完成后,虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中,方法区中的数据存储格式由虚拟机实现自行定义,<br>虚拟机规范未规定此区域的具体数据结构. 然后在内存中实例化一个<code>java.lang.Class</code>类的对象(并没有明确规定是在Java堆中,<br>对于HotSpot虚拟机而言,Class对象比较特殊,它虽然是对象,但是存放在方法区里面),<br>这个对象将作为程序访问方法区中的这些类型数据的外部接口.<br>_</strong></li></ol><h3 id="2-3-验证"><a href="#2-3-验证" class="headerlink" title="2.3 - 验证"></a>2.3 - 验证</h3><p>   &emsp;&emsp;确保Class文件的字节流中包含的信息符合当前虚拟机的要求,并且不会危害虚拟机自身的安全.<br>   <code>-Xverify:none</code><br>   参数来关闭大部分的类验证措施,以缩短虚拟机类加载的时间.  </p><ol><li>文件格式验证<ul><li>魔数<strong>0xCAFEBABE</strong>验证</li><li>主、次版本号验证</li><li>常量池常量验证</li><li>UTF-8编码验证</li><li>…</li></ul></li><li>元数据验证<ul><li>这个类是否有父类</li><li>该类是否继承了不能继承的类(如:<code>final类</code>)</li><li>…</li></ul></li><li>字节码验证<br>第三阶段是整个验证过程中最复杂的一个阶段,主要目的是通过数据流和控制流分析,确定程序语义是合法的、 符合逻辑的.<ul><li>保证跳转指令不会跳转到方法体以外的字节码指令上.</li><li>保证方法体中的类型转换是有效的</li><li>…</li></ul></li><li>符号引用验证<ul><li>符号引用中通过字符串描述的全限定名是否能找到对应的类.</li><li>在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段.</li><li>符号引用中的类、 字段、 方法的访问性(<code>private</code>、 <code>protected</code>、 <code>public</code>、 <code>default</code>)是否可被当前类访问<br>(不通过将抛一个IncompatibleClassChangeError异常子类).</li><li>…</li></ul></li></ol><h3 id="2-4-准备"><a href="#2-4-准备" class="headerlink" title="2-4 - 准备"></a>2-4 - 准备</h3><p>   &emsp;&emsp;准备阶段是正式为类变量分配内存并设置类变量初始值的阶段,这些变量所使用的内存都将在方法区中进行分配.<br>   注:内存分配仅包括类变量(static修饰),不包括实例变量;初始值通常是指零值(如:<code>public static int v = 123;</code> 初始值v为0而非123,<br>   但如<code>public static final int v = 123;</code>时将被初始化为123)</p><h3 id="2-5-解析"><a href="#2-5-解析" class="headerlink" title="2-5 - 解析"></a>2-5 - 解析</h3><p>   &emsp;&emsp;解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程</p><ul><li>符号引用(Symbolic References)</li><li>直接引用(Direct References)</li><li>虚拟机对除invokedynamic(动态调用点限定符)指令外的操作进行缓存</li><li>解析动作主要针对类或接口、 字段、 类方法、 接口方法、 方法类型、 方法句柄和调用点限定符7类符号引用进行,<br>分别对应于常量池的<strong>CONSTANT_Class_info</strong>、<strong>CONSTANT_Fieldref_info</strong>、 <strong>CONSTANT_Methodref_info</strong>、<br><strong>CONSTANT_InterfaceMethodref_info</strong>、 <strong>CONSTANT_MethodType_info</strong>、<strong>CONSTANT_MethodHandle_info</strong><br>和<strong>CONSTANT_InvokeDynamic_info</strong> 7种常量类型<ul><li>1)类或接口解析</li><li>2)字段解析</li><li>3)类方法解析</li><li>4)接口方法解析</li></ul></li></ul><h3 id="2-6-初始化"><a href="#2-6-初始化" class="headerlink" title="2-6 - 初始化"></a>2-6 - 初始化</h3><p>   &emsp;&emsp;类加载的最后一步,真正执行java的字节码<code>.&lt;clinit&gt;()</code>方法保证在子类执行之前父类的<code>&lt;clinit&gt;()</code>已执行完毕.虚拟机中第一个被执<br>   行的<code>&lt;clinit&gt;()</code>方法的类肯定是<code>java.lang.Object.&lt;clinit&gt;()</code>虚拟机保证只执行一次,多线程时只会有一条线程执行,其他线程阻塞等待.</p><h3 id="2-7-卸载"><a href="#2-7-卸载" class="headerlink" title="2-7 - 卸载"></a>2-7 - 卸载</h3><h2 id="3-类加载器"><a href="#3-类加载器" class="headerlink" title="3. 类加载器"></a>3. 类加载器</h2><p>   &emsp;&emsp;<strong>描述</strong><br>   &emsp;&emsp;通过一个类的全限定名来获取描述此类的二进制字节流<br>   应用:类层次划分、热部署、OSGi(面向Java的动态模型系统)、代码加密等</p><h3 id="3-1-类与类加载器"><a href="#3-1-类与类加载器" class="headerlink" title="3-1 - 类与类加载器"></a>3-1 - 类与类加载器</h3><p>   &emsp;&emsp;相同的类被不同的类加载器加载他们必不相等.</p><h3 id="3-2-双亲委派模型-Parents-Delegation-Model"><a href="#3-2-双亲委派模型-Parents-Delegation-Model" class="headerlink" title="3-2 - 双亲委派模型(Parents Delegation Model)"></a>3-2 - 双亲委派模型(Parents Delegation Model)</h3><p>   &emsp;&emsp;<strong>类加载器</strong>  </p><ol><li>启动类加载器(Bootstrap ClassLoader)C++实现、虚拟机一部分<ul><li>又称 引导类加载器</li><li>按名识别,如:rt.jar</li><li>负责加载&lt;JAVA_HOME&gt;\lib目录或被参数<code>-Xbootclasspth</code>指定的目录</li></ul></li><li><p>其他类加载器, java实现,独立与虚拟机外部,全部继承抽象类java.lang.ClassLoader</p><ul><li>扩展类加载器(Extension ClassLoader)<ul><li>由sun.misc.Launcher$ExtClassLoader类实现</li><li>负责加载&lt;JAVA_HOME&gt;\lib\ext目录或参数<code>-Djava.ext.dirs</code>所指定目录下的类</li></ul></li><li>应用程序类加载器(Application ClassLoader)<ul><li>又称 系统类加载器</li><li>由sun.misc.Launcher$AppClassLoader实现</li><li>它负责加载用户类路径(ClassPath)上所指定的类库,开发者可以直接使用这个类加载器,是程序中默认的类加载器  </li></ul></li></ul><p>双亲委派模型图</p><pre><code>                                                 自定义类加载器(CustomClassLoader)                                                /启动类加载器 &lt;-- 扩展类加载器 &lt;-- 应用程序加载器 &lt;--                                                \                                                 自定义类加载器(CustomClassLoader)</code></pre><p>&emsp;&emsp;双亲委派模型的工作过程是:如果一个类加载器收到了类加载的请求,它首先不会自己去尝试加载这个类,而<br>是把这个请求委派给父类加载器去完成,每一个层次的类加载器都是如此,因此所有的加载请求最终都应该传送到顶层的启动类加载器中,<br>只有当父加载器反馈自己无法完成这个加载请求(它的搜索范围中没有找到所需的类)时,子加载器才会尝试自己去加载</p></li></ol><h3 id="3-3-破坏双亲委派模型"><a href="#3-3-破坏双亲委派模型" class="headerlink" title="3-3 - 破坏双亲委派模型"></a>3-3 - 破坏双亲委派模型</h3><h2 id="4-问题"><a href="#4-问题" class="headerlink" title="4. 问题"></a>4. 问题</h2><h3 id="4-1-为什么要用双亲委派类加载"><a href="#4-1-为什么要用双亲委派类加载" class="headerlink" title="4-1 - 为什么要用双亲委派类加载"></a>4-1 - 为什么要用双亲委派类加载</h3><p>   &emsp;&emsp;双亲委派模型可以防止内存中出现多分同样的字节码，如果没有双亲委派模型的话如果用户编写了一个<code>java.lang.Object</code>的同<br>   名类放在classpath中，多个类加载器去加载这个类到内存中系统会出现多个不同的Object类，那么类之间的比较结果及类的唯一性将无法<br>   保证，而且如果不使用这种模型将给虚拟机带来安全隐患。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Classloader </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>The Interview Experience</title>
      <link href="/post/2018/06/19/interview-experience/"/>
      <url>/post/2018/06/19/interview-experience/</url>
      
        <content type="html"><![CDATA[<h2 id="一-JAVA基础"><a href="#一-JAVA基础" class="headerlink" title="一. JAVA基础"></a>一. JAVA基础</h2><h3 id="1-9种基本数据类型及其封装类-所占大小"><a href="#1-9种基本数据类型及其封装类-所占大小" class="headerlink" title="1. 9种基本数据类型及其封装类,所占大小"></a>1. 9种基本数据类型及其封装类,所占大小</h3><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">包装类</th><th style="text-align:center">大小(字节)</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">Byte</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">Character</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">Short</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">Integer</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">Float</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">Double</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">Long</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">Boolean</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">void</td><td style="text-align:center">Void</td><td style="text-align:center">-</td></tr></tbody></table><h3 id="2-Object类方法"><a href="#2-Object类方法" class="headerlink" title="2. Object类方法"></a>2. Object类方法</h3><ul><li>getClass() 获取类对象Class (native)</li><li>hashCode() 获取hashCode值(native)</li><li>equals(Object) 判断是否同一对象</li><li>clone() 对象克隆(native)</li><li>wait() </li><li>wait(timeout)</li><li>wait(timeout, nanos)</li><li>notify()</li><li>notifyAll()</li><li>toString()</li><li>finalize() (protected)</li></ul><h3 id="3-equals-、hashCode、-比较"><a href="#3-equals-、hashCode、-比较" class="headerlink" title="3. equals 、hashCode、== 比较"></a>3. equals 、hashCode、== 比较</h3><ul><li>equals是Object类方法，内部实现的是判断对象是否相等(即 ==)。</li><li>hashCode是Object的native方法，返回的是类似表示对象地址的整数。</li><li>==是判断2个对象是否相同。</li><li>如果2个对象相同则hashCode一定相等，若2个对象不同hashCode不一定相等。</li><li>一般地重写了equals方法建议也要重写hashCode方法。</li></ul><h3 id="4-面向对象的特性与含义"><a href="#4-面向对象的特性与含义" class="headerlink" title="4. 面向对象的特性与含义"></a>4. 面向对象的特性与含义</h3><ul><li><strong>抽象</strong>  是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不<br>关注这些行为的细节是什么。</li><li><strong>封装</strong>  是指将某事物的属性和行为包装到对象中，这个对象只对外公布需要公开的属性和行为，而这个公布也是可以有选择性的公布<br>给其它对象，private、protected、public三种修饰符或不用(即默认default)对外部对象访问该对象的属性和行为进行限制。</li><li><strong>继承</strong>  是子对象可以继承父对象的属性和行为，亦即父对象拥有的属性和行为，其子对象也就拥有了这些属性和行为。</li><li><strong>多态</strong>  是指父对象中的同一个行为能在其多个子对象中有不同的表现。也就是说子对象可以使用重写父对象中的行为,使其拥有不同于<br>父对象和其它子对象的表现,这就是overriding(重写)。实现多态的技术称为：动态绑定(dynamic binding)，是指在执行期间判<br>断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</li></ul><h3 id="5-Override与Overload"><a href="#5-Override与Overload" class="headerlink" title="5. Override与Overload"></a>5. Override与Overload</h3><ul><li><strong>Override</strong>是重写:方法名称、参数个数，类型，顺序，返回值类型都是必须和父类方法一致的。它的关系是父子关系。</li><li><strong>Overload</strong>是重载:方法名称不变，方法参数个数、类型、顺序至少一个不同。它的关系是同一个类，同一个方法名。</li></ul><h3 id="6-wait与sleep"><a href="#6-wait与sleep" class="headerlink" title="6. wait与sleep"></a>6. wait与sleep</h3><ul><li>wait是Object类的方法；而sleep是Thread类的静态方法。</li><li>当线程执行到wait方法时，他就会进入到该对象相关的等待池中，同时释放对象的机锁，其他线程可访问，直到超时或该对象调用notify<br>或notifyAll；而当线程执行sleep方法时，线程进入阻塞状态，让出CPU资源，但在Synchronized同步块中不能释放对象的锁。</li><li>wait方法必须放在synchronized代码块中，否则会在时抛出<code>java.lang.IllegalMonitorStateException</code>异常。</li><li>wait和sleep都可以通过interrupt()方法打断线程的暂停状态，从而使线程立刻抛出InterruptedException(但不建议使用该方法)。</li></ul><h3 id="7-java并发"><a href="#7-java并发" class="headerlink" title="7. java并发"></a>7. java并发</h3><blockquote><p><a href="/2018/06/15/java-concurrent">Java并发编程</a>   </p></blockquote><h3 id="8-interface与abstract类"><a href="#8-interface与abstract类" class="headerlink" title="8. interface与abstract类"></a>8. interface与abstract类</h3><ul><li>抽象类是包含有抽象方法的类(也可以拥有成员变量和普通成员方法)，抽象方法是只有方法声明没有具体实现的方法，所以抽象类不能实例化，是为<br>了继承而存的，抽象类与普通类有3点区别：<ul><li>1.抽象方法必须是public或protected，缺损情况下默认为public;</li><li>2.抽象类不能被实例化；</li><li>3.如果一个类继承了抽象类，则子类必须实现父类的抽象方法，若没有实现父类抽象方法，则子类也必须定义为抽象类。  </li></ul></li><li>接口是泛指供别人调用的方法或函数，接口中可以有变量和方法，变量被隐式地指定为<code>public static final</code>，方法被隐式地指定为<br><code>public abstract</code>,接口中的方法不能有具体的实现(JDK8之后接口可以有default方法)。</li><li>接口与抽象类比较: <ul><li>1.语法层面上:<ul><li>1).抽象类可以提供成员方法的实现细节而接口中只能存在public abstract方法</li><li>2).抽象类中的成员变量可以是各种类型，而接口中的成员变量只能是public static final类型</li><li>3).接口中不能存在静态代码块和静态方法，而抽象类中可以</li><li>4).一个类只能继承一个抽象类而可以实现多个接口</li></ul></li><li>2.设计层面上: <ul><li>1).抽象类是对一种事物对象的抽象，而接口是对事物行为的抽象，抽象类是对整个类整体的抽象，包括属性、行为，而接口是对类的局部<br>(行为)的抽象。继承抽象类是”是不是”的关系，实现接口是”有没有”的关系。</li><li>2).设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计，而接口是一种行为规范，它是一种辐射式设计   </li></ul></li></ul></li></ul><h3 id="9-fail-fast"><a href="#9-fail-fast" class="headerlink" title="9. fail-fast"></a>9. fail-fast</h3><ul><li>fail-fast：机制是java集合(Collection)中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。<br>例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出异常:<br><code>ConcurrentModificationException</code>，产生fail-fast事件。</li></ul><h3 id="10-JDK和CGLIB动态代理"><a href="#10-JDK和CGLIB动态代理" class="headerlink" title="10. JDK和CGLIB动态代理"></a>10. JDK和CGLIB动态代理</h3><ul><li>JDK动态代理只能针对实现了接口的类生成代理(实例化一个类)。此时代理对象和目标对象实现了相同的接口，目标对象作为代理对象的一个属性，<br>具体接口实现中，可以在调用目标对象相应方法前后加上其他业务处理逻辑。</li><li>CGLIB是针对类实现代理，主要是对指定的类生成一个子类(没有实例化一个类)，覆盖其中的方法。</li></ul><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="1-内存模型"><a href="#1-内存模型" class="headerlink" title="1. 内存模型"></a>1. 内存模型</h3><ul><li><strong>堆内存(Heap)</strong> 是线程间共享内存，主要存放java的对象及数组</li><li><strong>栈内存(Stack)</strong> 是线程间不共享的，主要存放基本数据类型和对象及数组的引用等   </li><li><strong>方法区(Method Area)</strong> 是存储已被虚拟机加载的类信息、 常量、 静态变量、 即时编译器编译后的代码等数据</li><li><strong>本地方法栈(Native Method Stack)</strong> 为虚拟机调用本地Native方法提供服务,有的虚拟机与虚拟机栈合二为一</li><li><strong>程序计数器(Program Counter Register)</strong> 是当前虚拟机执行指令的地址，当执行到Native方法时其值为空(Undefined)</li><li><strong>运行时常量池(Runtime Constant Pool)</strong> 用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放</li><li><strong>直接内存(Direct Memory)</strong> NIO的DirectByteBuffer对象使用直接内存,这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据</li></ul><h3 id="2-GC的2种判定方法"><a href="#2-GC的2种判定方法" class="headerlink" title="2. GC的2种判定方法"></a>2. GC的2种判定方法</h3><ul><li><strong>引用计数</strong>: 实现简单、高效，但会出现循环引用的时候对象将无法得到回收</li><li><strong>引用链</strong>：即可达性分析，以GC Roots为根节点开始向下搜索，所走的路径叫做引用链(Reference Chain)，当一个对象到GC Roots对象没有<br>任何引用链时说明该对象不可用，可作为GC Roots的对象：<ul><li>1.虚拟机栈（栈帧中的本地变量表）中引用的对象。</li><li>2.方法区中的类静态属性引用的对象或者常量引用的对象。</li><li>3.本地方法栈中JNI（就是native方法）引用的对象。     </li></ul></li></ul><h3 id="3-java自动内存管理"><a href="#3-java自动内存管理" class="headerlink" title="3. java自动内存管理"></a>3. java自动内存管理</h3><blockquote><p><a href="/2018/06/15/java-gc">Java自动内存管理</a>   </p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1-OSI网络模型"><a href="#1-OSI网络模型" class="headerlink" title="1. OSI网络模型"></a>1. OSI网络模型</h3><table><thead><tr><th style="text-align:center">层级</th><th style="text-align:left">名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">应用层</td><td style="text-align:left">指网络操作系统和具体的应用程序，对应WWW服务器、FTP服务器等应用软件</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">表示层</td><td style="text-align:left">数据语法的转换、数据的传送等</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">会话层</td><td style="text-align:left">建立起两端之间的会话关系，并负责数据的传送</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">传输层</td><td style="text-align:left">负责错误的检查与修复，以确保传送的质量，是TCP/UDP工作的地方。（报文）</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">网络层</td><td style="text-align:left">提供了编址方案,IP协议工作的地方(数据包）</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">数据链路层</td><td style="text-align:left">将由物理层传来的未经处理的位数据包装成数据帧</td></tr><tr><td style="text-align:center">7</td><td style="text-align:left">物理层</td><td style="text-align:left">对应网线、网卡、接口等物理设备(位)</td></tr></tbody></table><h3 id="2-TCP-IP协议"><a href="#2-TCP-IP协议" class="headerlink" title="2. TCP/IP协议"></a>2. TCP/IP协议</h3><ul><li>应用层</li><li>传输层</li><li>网络层</li><li>链路层</li></ul><h3 id="3-IP分类"><a href="#3-IP分类" class="headerlink" title="3. IP分类"></a>3. IP分类</h3><ul><li>A类地址（1.0.0.0-126.255.255.255）用于最大型的网络，该网络的节点数可达16,777,216个。</li><li>B类地址（128.0.0.0-191.255.255.255）用于中型网络，节点数可达65,536个。</li><li>C类地址（192.0.0.0-223.255.255.255）用于256个节点以下的小型网络的单点网络通信。</li><li>D类地址（224.0.0.0-239.255.255.255）并不反映网络的大小，只是用于组播，用来指定所分配的接收组播的节点组，这个节点组由组播订<br>阅成员组成。D类地址的范围为</li><li>E类（240.0.0.0-255.255.255.254）地址用于试验。   </li></ul><h3 id="4-TCP与UDP"><a href="#4-TCP与UDP" class="headerlink" title="4. TCP与UDP"></a>4. TCP与UDP</h3><ul><li>TCP、UDP都是传输层协议</li><li>TCP(Transmission Control Protocol, 传输控制协议) 是面向连接的协议(即在收发数据前必须和对方建立可靠连接)，TCP建立连接要3次<br>握手，TCP断开连接需要4次挥手，保证了数据通信的可靠性；TCP包头最小长度为20个字节数。</li><li>UDP(User Data Protocol, 用户数据报协议) 是一个非连接的协议(即传输数据之前源端和终端不建立连接)，只是简单的把应用程序的数据<br>尽快地扔到网络上，因此UDP传输速度只受应用程序生成数据速度、计算机的能力和传输带宽的限制，接收端，UDP把每个消息段放入队列中<br>应用程序读取使用；UDP可以一台服务器同时向多台客户机传输相同数据；UDP消息头很短只有8个字节；UDP尽可能快的发送数据，但不保证<br>数据的可靠性(丢包，顺序等)；UDP是面向报文的，发送方的报文只是添加首部后就向下交付给IP层，既不拆分也不合并，这些需要接收端<br>应用程序自己实现。</li></ul><h3 id="5-死锁的必要条件"><a href="#5-死锁的必要条件" class="headerlink" title="5. 死锁的必要条件"></a>5. 死锁的必要条件</h3><ul><li><strong>互斥条件</strong>：资源是独占的且排他使用，进程互斥使用资源，即任意时刻一个资源只能给一个进程使用，其他进程若申请一个资源，而该资源<br>被另一进程占有时，则申请者等待直到资源被占有者释放。</li><li><strong>不可剥夺条件</strong>：进程所获得的资源在未使用完毕之前，不被其他进程强行剥夺，而只能由获得该资源的进程资源释放。</li><li><strong>请求和保持条件</strong>：进程每次申请它所需要的一部分资源，在申请新的资源的同时，继续占用已分配到的资源。</li><li><strong>循环等待条件</strong>：在发生死锁时必然存在一个进程等待队列{P1,P2,…,Pn},其中P1等待P2占有的资源，P2等待P3占有的资源，…，Pn等待P1占有<br>的资源，形成一个进程等待环路，环路中每一个进程所占有的资源同时被另一个申请，也就是前一个进程占有后一个进程所深情地资源。     </li></ul><h3 id="6-MySQL索引-5-5之前默认MyISAM引擎，5-5之后默认InnoDB"><a href="#6-MySQL索引-5-5之前默认MyISAM引擎，5-5之后默认InnoDB" class="headerlink" title="6. MySQL索引(5.5之前默认MyISAM引擎，5.5之后默认InnoDB)"></a>6. MySQL索引(5.5之前默认MyISAM引擎，5.5之后默认InnoDB)</h3><ul><li>MyISAM使用B-Tree实现主键索引、唯一索引和非主键索引。</li><li>InnoDB中非主键索引使用的是B-Tree数据结构，而主键索引使用的是B+Tree。     </li></ul><h3 id="7-进程与线程"><a href="#7-进程与线程" class="headerlink" title="7. 进程与线程"></a>7. 进程与线程</h3><ul><li>进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元</li><li>同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。</li><li>进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进<br>程中的其他线程的结束   </li><li>线程是轻量级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的</li><li>线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源</li><li>线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标<br>示一个进程或一个线程的标志</li></ul><h3 id="8-IPC通信方式"><a href="#8-IPC通信方式" class="headerlink" title="8. IPC通信方式"></a>8. IPC通信方式</h3><ul><li><strong>管道(Pipe)</strong>：匿名管道（pipe亲缘关系的进程通信）、命名管道（mkfifo/mknod）</li><li><strong>消息队列</strong>：是基于消息的、用无亲缘关系的进程间通信，主要函数：msgget、msgsend、msgrecv、msgctl</li><li><strong>信号量</strong>：相当于一把互斥锁，通过p、v操作，主要函数：semget、semop、semctl</li><li><strong>共享内存</strong>：是进程间通信速度最快的，所以用经常是集合信号量或互斥锁来实现同步，shmget、shmat、shmdt、shmctl  </li></ul><h3 id="9-虚拟内存"><a href="#9-虚拟内存" class="headerlink" title="9. 虚拟内存"></a>9. 虚拟内存</h3><ul><li>是将进程部分装入内存中，从而能实现一个很大的程序能在一个比它小的内存中运行，它的主要实现是靠程序的换进换出来实现的，因为内存<br>中0-3G是用户使用，3-4G才是内存使用，通过映射来实现来进行逻辑地址到物理地址的映射</li></ul><h3 id="10-设计原则"><a href="#10-设计原则" class="headerlink" title="10. 设计原则"></a>10. 设计原则</h3><ul><li>依赖倒置原则 － Dependency Inversion Principle (DIP) </li><li>里氏替换原则 － Liskov Substitution Principle (LSP) </li><li>接口分隔原则 － Interface Segregation Principle (ISP) </li><li>单一职责原则 － Single Responsibility Principle (SRP) </li><li>开闭原则 － The Open-Closed Principle (OCP)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Interview </tag>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Database</title>
      <link href="/post/2018/06/18/database/"/>
      <url>/post/2018/06/18/database/</url>
      
        <content type="html"><![CDATA[<h2 id="一-四大特性-CIAD"><a href="#一-四大特性-CIAD" class="headerlink" title="一. 四大特性(CIAD)"></a>一. 四大特性(CIAD)</h2><ol><li><strong>原子性(Atomicity)</strong>: 要么全成功，要么全失败，失败会回滚。</li><li><strong>一致性(Consistency)</strong>: 一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执<br>行之前和执行之后都必须处于一致性状态。</li><li><strong>隔离性(Isolation)</strong>: 隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，<br>不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</li><li><strong>持久性(Durability)</strong>: 一旦事物提交成功，那么数据库中的数据就是永久改变的，即使系统故障也不会丢失提交的事物。</li></ol><h2 id="二-数据库隔离级别"><a href="#二-数据库隔离级别" class="headerlink" title="二. 数据库隔离级别"></a>二. 数据库隔离级别</h2><h3 id="1-不考虑隔离级别造成的问题"><a href="#1-不考虑隔离级别造成的问题" class="headerlink" title="1. 不考虑隔离级别造成的问题"></a>1. 不考虑隔离级别造成的问题</h3><ol><li>更新丢失: 2个事物同时更新一条数据会有一个事物把另一个事物的更新覆盖了，这是因为系统没有任何操作隔离导致的.</li><li>脏读: 一个事物读取了另一个事物还未提交事物的数据</li><li>不可重复读: 一个事务对同一行数据重复读取两次，但是却得到了不同的结果<ul><li>虚读: 一个事物去改变数据改变后发现还有数据为按要求改变，是因为另一事物也做了改变的缘故</li><li>幻读: 同一个事物内多次查询返回的结果不一致，是因为另一事物对数据进行了改变</li></ul></li></ol><h3 id="2-隔离级别-低-gt-高"><a href="#2-隔离级别-低-gt-高" class="headerlink" title="2. 隔离级别(低 -&gt; 高)"></a>2. 隔离级别(低 -&gt; 高)</h3><ol><li><strong>Read uncommitted(未授权读取、读未提交)</strong><ul><li>当一个事物在执行写操作时，则不允许另一事物执行写操作，可执行其他操作，可由排他锁来实现</li><li>解决了更新丢失问题，但会出现脏读</li></ul></li><li><strong>Read committed(授权读取、读提交)</strong><ul><li>读取数据事物允许其他事物继续访问该数据，但未提交的数据禁止其他事物访问</li><li>避免了脏读，但可能会出现幻读</li></ul></li><li><strong>Repeatable read(可重复读取)</strong><ul><li>读数据的事物将禁止写事物(可以读事物),写事物将禁止所有其他事物</li><li>避免了脏读和不可重复读，但可能会出现幻读</li></ul></li><li><strong>Serializable(序列化)</strong><ul><li>事物严格按照顺序一个一个执行</li><li>能避免所有情况，但会极大影响系统性能</li></ul></li></ol><h3 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3. 扩展"></a>3. 扩展</h3><ol><li>大多数数据库的默认级别就是Read committed，比如Sql Server , Oracle。<br>  Mysql的默认隔离级别就是Repeatable read。 </li><li>MySQL数据库隔离级别管理  <ul><li>查看隔离级别: <code>select @@tx_isolation</code>  </li><li>修改隔离级别:<br><code>set [glogal | session] transaction isolation level 隔离级别名称</code>如<code>set transaction isolation level read-committed</code><br>或者<code>set tx_isolation=&#39;隔离级别名称&#39;</code> 如 <code>set tx_isolation = &#39;read-committed&#39;</code></li></ul></li><li>隔离级别的设置只对当前连接有效  </li></ol><h3 id="4-MySQL悲观锁、乐观锁、共享锁与排他锁"><a href="#4-MySQL悲观锁、乐观锁、共享锁与排他锁" class="headerlink" title="4. MySQL悲观锁、乐观锁、共享锁与排他锁"></a>4. MySQL悲观锁、乐观锁、共享锁与排他锁</h3><ol><li><strong>悲观锁</strong>: 在操作数据时都认为会出现数据冲突，所以每次都会去获取锁，只有获取锁后才能对数据操作。</li><li><strong>乐观锁</strong>: 在操作数据都认为不会发生数据冲突，可以直接操作，一般由用户通过版本号自己实现。</li><li><strong>共享锁</strong>: 共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。在SQL后面加上<code>lock in share mode</code>表示使用共享锁。</li><li><strong>排他锁</strong>: 排它锁与共享锁相对应，就是指对于多个不同的事务，对同一个资源只能有一把锁。与共享锁类型，在需要执行的<br>语句后面加上<code>for update</code>就可以了。</li></ol><h2 id="三-数据库的三大范式-Normal-Form"><a href="#三-数据库的三大范式-Normal-Form" class="headerlink" title="三. 数据库的三大范式(Normal Form)"></a>三. 数据库的三大范式(Normal Form)</h2><ol><li><strong>第一范式(1NF)</strong>：强调的是列的原子性，即列不能够再分成其他几列。</li><li><strong>第二范式(2NF)</strong>：一个表必须有一个主键，二是其他列必须完全依赖于主键，而不能依赖主键一部分</li><li><strong>第三范式(3NF)</strong>：非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列A依赖于非主键列B，非主键列B依赖于主键的情况。</li></ol><h2 id="四-数据库数据结构"><a href="#四-数据库数据结构" class="headerlink" title="四. 数据库数据结构"></a>四. 数据库数据结构</h2><ol><li>B+ Tree<ul><li>相较于B Tree多了一层，只有树的叶子节点存储实际数据，方便了range查询操作</li></ul></li></ol><h2 id="五-mysql的MyISAM与InnoDB"><a href="#五-mysql的MyISAM与InnoDB" class="headerlink" title="五. mysql的MyISAM与InnoDB"></a>五. mysql的MyISAM与InnoDB</h2><ol><li><code>show engines</code> 查看当前引擎与默认引擎</li><li>设置表引擎 CREATE后面加<code>CREATE TABLE &quot;&quot; () ENGINE=MyISAM</code> 或 <code>alter table 表名 ENGINE = InnoDB</code></li><li>比较  <ul><li>MyISAM不支持事物,InnoDB支持  </li><li>InnoDB支持行锁定,MyISAM不支持，只支持表锁定   </li><li>InnoDB支持外键,MyISAM不支持  </li><li>MyISAM支持全文检索,InnoDB不支持  </li><li>MyISAM内置一个数据计数器，能很容易得出<code>SELECT COUNT(*) FROM TABLE_NAME</code>结果  </li><li>MyISAM索引数据与表数据分离，而InnoDB索引与表数据紧密关联  </li></ul></li></ol><h2 id="六-SQL功能"><a href="#六-SQL功能" class="headerlink" title="六. SQL功能"></a>六. SQL功能</h2><ol><li><strong>数据定义(DDL)</strong>：用于定义SQL模式、基本表、视图和索引的创建和撤消操作</li><li><strong>数据操纵(DML)</strong>：数据操纵分成数据查询和数据更新两类。数据更新又分成插入、删除、和修改三种操作</li><li><strong>数据控制</strong>：包括对基本表和视图的授权，完整性规则的描述，事务控制等内容</li><li><strong>嵌入式SQL使用规定</strong>：涉及到SQL语句嵌入在宿主语言程序中使用的规则</li></ol>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Compile and Optimize</title>
      <link href="/post/2018/06/17/java-compile-and-optimize/"/>
      <url>/post/2018/06/17/java-compile-and-optimize/</url>
      
        <content type="html"><![CDATA[<h2 id="1-早期-编译期-优化"><a href="#1-早期-编译期-优化" class="headerlink" title="1. 早期(编译期)优化"></a>1. 早期(编译期)优化</h2><h3 id="1-1-概论"><a href="#1-1-概论" class="headerlink" title="1-1. 概论"></a>1-1. 概论</h3><ol><li>前端编译器:Sun的Javac、 Eclipse JDT中的增量式编译器(ECJ)<ul><li>JIT编译器:HotSpot VM的C1、 C2编译器</li><li>AOT编译器:GNU Compiler for the Java(GCJ)、 Excelsior JET</li></ul></li><li>javac这类编译器几乎不对代码进行性能优化,把性能优化放到了JIT即时编译器内,可为JRuby、Groovy这类语言的代码也同等享有优化带来的好处</li></ol><h3 id="1-2-javac编译"><a href="#1-2-javac编译" class="headerlink" title="1-2. javac编译"></a>1-2. javac编译</h3><h4 id="1-2-1-编译过程"><a href="#1-2-1-编译过程" class="headerlink" title="1-2.1. 编译过程"></a>1-2.1. 编译过程</h4><ol><li>解析与填充符号表过程  </li></ol><ul><li>词法、语法分析<ul><li>词法分析是将源代码的字符流转变为标记(Token)集合,单个字符是程序编写过程的最小元素,而标记则是编译过程的最小元素,关键字、 变量名、 字面量、 运算符都可以成为标记</li><li>语法分析是根据Token序列构造抽象语法树的过程,抽象语法树(Abstract Syntax Tree,AST)是一种用来描述程序代码语法结构的树形表示方式,语法树的每一个节点都代表着程序<br>代码中的一个语法结构(Construct),例如包、 类型、 修饰符、 运算符、 接口、 返回值甚至代码注释等都可以是一个语法结构.</li></ul></li><li>填充符号表<ul><li>符号表(Symbol Table)是由一组符号地址和符号信息构成的表格</li><li>在语义分析中,符号表所登记的内容将用于语义检查(如检查一个名字的使用和原先的说明是否一致)和产生中间代码.在目标代码生成阶段,当对符号名进行地址分配时,符号表是地址分配的依据.</li></ul></li></ul><ol start="2"><li>插入式注解处理器的注解处理过程</li><li>分析与字节码生成过程</li></ol><ul><li>标注检查<ul><li>检查的内容包括诸如变量使用前是否已被声明、 变量与赋值之间的数据类型是否能够匹配等</li><li>常量折叠 如定义了<code>int a = 1 + 2</code>会被编译为<code>int a = 3</code></li></ul></li><li>数据及控制流分析<ul><li>数据及控制流分析是对程序上下文逻辑更进一步的验证,它可以检查出诸如程序局部变量在使用前是否有赋值、<br>方法的每条路径是否都有返回值、 是否所有的受查异常都被正确处理了等问题.</li></ul></li><li>语法糖<ul><li>语法糖:也称糖衣语法,是由英国计算机科学家彼得·约翰·兰达(Peter J.Landin)发明的一个术语,<br>指在计算机语言中添加的某种语法,这种语法对语言的功能并没有影响,但是更方便程序员使用.<br>通常来说,使用语法糖能够增加程序的可读性,从而减少程序代码出错的机会.</li><li>java语法糖:泛型、变长参数、 自动装箱/拆箱等 内部类、 枚举类、 断言语句、 对枚举和字符串(在JDK 1.7中支持)<br>的switch支持、 try语句中定义和关闭资源(在JDK 1.7中支持)等</li><li>泛型:编译器会进行解泛,所以泛型不能进行方法重载</li><li>自动装箱、 拆箱与遍历循环</li><li>条件编译 if 的条件为常量时编译期会被执行</li></ul></li><li>字节码生成<ul><li>字节码生成阶段不仅仅是把前面各个步骤所生成的信息(语法树、 符号表)转化成字节码写到磁盘中,<br>编译器还进行了少量的代码添加和转换工作.</li></ul></li></ul><h2 id="2-晚期-运行期-优化"><a href="#2-晚期-运行期-优化" class="headerlink" title="2. 晚期(运行期)优化"></a>2. 晚期(运行期)优化</h2><h3 id="2-1-即时编译器-JIT"><a href="#2-1-即时编译器-JIT" class="headerlink" title="2-1. 即时编译器(JIT)"></a>2-1. 即时编译器(JIT)</h3><ol><li>为了提高热点代码的执行效率,在运行时,虚拟机将会把这些代码编译成与本地平台相关的机器码,并进行各种层次的优化,<br>完成这个任务的编译器称为即时编译器(Just In Time Compiler)</li><li>解释器与编译器(sun HotSpot虚拟机为例)</li></ol><ul><li>交互模型<pre><code>        +---------------即时编译-----------↓        ↓                         Client Compiler(C1编译器)     解释器(Interpreter)               编译器        ↑                         Server Compiler(C2编译器)        +----------------逆优化------------↑</code></pre></li><li>HotSpot虚拟机同时由解释器与编译器搭配使用(成为混合模式(Mixed Model)),<br>可添加参数-Xint强制虚拟机使用解释模式(Interpreted Mode),可添加参数<code>-Xcomp</code>强制虚拟机使用编译模式(Compiled Mode)</li><li>启动参数<code>-client</code>启用Client Compiler编译器 参数<code>-server</code>启用Server Compiler编译器</li><li>HotSpot虚拟机还会逐渐启用分层编译(Tiered Compilation)的策略,分层编译的概念在JDK 1.6时期出现,<br>JDK1.7中Server模式中默认开启,之前需配参数<code>-XX:+TieredCompilation</code>启用</li></ul><ol start="3"><li>编译对象与触发条件</li></ol><ul><li>触发条件<ul><li>被多次调用的方法</li><li>被多次执行的循环体,这个称为栈上替换(On Stack Replacement,简称为OSR编译)</li></ul></li><li>热点代码判定<ul><li>基于采样的热点探测,周期性检测个线程的栈顶,若某个方法经常在栈顶,则认为是热点方法；<br>优点是实现简单简单,高效,容易获取方法调用关系,缺点是不能准确判定一个方法的热度</li><li>基于计数器的热点探测,虚拟机为每个方法设定计数器,统计方法执行次数,若超过一定阈值则认为是热点方法；<br>优点是能准确判定一个方法的热度,缺点是要为每个方法建立计数器并维护,实现麻烦,也不能获取方法的调用关系</li></ul></li><li>HotSpot虚拟机是基于计数器的热点探测,有2个计数器:方法调用计数器(Invocation Counter)和回边计数器(Back Edge Counter)<ul><li>方法调用计数器,Client模式下阈值为1500次,Server模式下阈值为1000次,可由参数<code>-XX:CompileThreshold</code>来设置<br><code>-XX:-UseCounterDecay</code>设置关闭热度衰减,<code>-XX:CounterHalfLifeTime</code>参数设置半衰周期的时间,单位是秒</li><li>回边计数器,参数<code>-XX:OnStackReplacePercentage</code>来间接调整回边计数器的阈值<br>Client模式下阈值计算公式:<br><code>方法调用计数器阈值(CompileThreshold)×OSR比率(OnStackReplacePercentage)[默认值为933]/100</code> 默认情况下为13995<br>Server模式下阈值计算公式:<br><code>方法调用计数器阈值(CompileThreshold)×(OSR比率(OnStackReplacePercentage)[默认值140]-解释器监控比率(InterpreterProfilePercentage)[默认值33]/100</code><br>默认情况下为10700</li></ul></li></ul><ol start="4"><li>编译过程<ul><li>Client模式下编译过程<br><img src="https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/optimize/Client-Compiler%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png" alt="Client Compiler编译过程"></li><li>Server模式下编译过程<br>相当复杂</li></ul></li><li>优化技术</li></ol><ul><li>公共子表达式消除<ul><li>经典优化技术,如果一个表达式E已经计算过了,并且从先前的计算到现在E中所有变量的值都没有发生变化,那么E的这次出现就成为了公共子表达式.<br>对于这种表达式,没有必要花时间再对它进行计算,只需要直接用前面计算过的表达式结果代替E就可以了</li></ul></li><li>数组边界检查消除<ul><li>语言相关的其他消除操作还有不少,如自动装箱消除(Autobox Elimination)、 安全点消除(Safepoint Elimination)、消除反射(Dereflection)等</li></ul></li><li>方法内联<ul><li>虚拟机最重要的优化手段之一,除了消除方法调用的成本之外,它更重要的意义是为其他优化手段建立良好的基础</li><li>非虚方法直接内联,虚方法引入了一种名为“类型继承关系分析”(Class Hierarchy Analysis,CHA)的技术,<br>检查发现没有多个目标版本可供选择,则也可内联,但需准备一个逃生门,即使有多个版本目标也会默认内联,但在调用时要检查,<br>发现版本目标不一致在取消内联,会从“逃生门”回到解释状态重新执行</li></ul></li><li>逃逸分析(JDK1.6)<ul><li>当下java最前沿的优化技术</li><li>逃逸分析的基本行为就是分析对象动态作用域:当一个对象在方法中被定义后,它可能被外部方法所引用,<br>例如作为调用参数传递到其他方法中,称为方法逃逸. 甚至还有可能被外部线程访问到,<br>譬如赋值给类变量或可以在其他线程中访问的实例变量,称为线程逃逸.</li><li>栈上分配(Stack Allocation),如果证明一个对象不会逃逸到方法之外,则可以将对象分配到方法栈帧内存,这样随着栈帧出栈而销毁,极大地降低了GC系统压力</li><li>同步消除(Synchronization Elimination),如果能证明一个变量不会逃逸出线程,那就可以消除掉同步措施,消除同步带来的消耗</li><li>标量替换(Scalar Replacement)<br>标量(Scalar),是指一个数据已经无法再分解成更小的数据来表示了,如:<code>int</code>,<code>long</code>,<code>double</code>等<br>聚合量(Aggregate),是指一个数据可以被分解,典型的java对象<br>如果证明一个对象不被外界访问,又可拆散的话,那程序在调用的时候就不创建该变量,改为创建多个成员变量来代替,<br>将对象拆分后,除了可以让对象的成员变量在栈上(栈上存储的数据,有很大的概率会被虚拟机分配至物理机器的高速寄存器中存储)<br>分配和读写之外,还可以为后续进一步的优化手段创建条件</li><li>逃逸分析尚不成熟</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JIT </tag>
            
            <tag> Optimize </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Collection Frame</title>
      <link href="/post/2018/06/15/java-collection-frame/"/>
      <url>/post/2018/06/15/java-collection-frame/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JAVA集合框架图"><a href="#1-JAVA集合框架图" class="headerlink" title="1. JAVA集合框架图"></a>1. JAVA集合框架图</h2><ul><li>集合框架<br><img src="https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/collections/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.jpg" alt="集合框架"></li><li>集合框架-简图<br><img src="https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/collections/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E7%AE%80%E5%9B%BE.jpg" alt="集合框架-简图"></li></ul><h2 id="2-ArrayList、LinkedList、Vector、Stack"><a href="#2-ArrayList、LinkedList、Vector、Stack" class="headerlink" title="2. ArrayList、LinkedList、Vector、Stack"></a>2. ArrayList、LinkedList、Vector、Stack</h2><ol><li>都是java的可存储重复元素的集合容器,都实现了Collection、List接口</li><li>ArrayList是基于数组的可动态扩展的、可存储重复元素的、有默认顺序的集合，非线程安全的，最大元素个数为<code>Integer.MAX_VALUE</code>个<br>由于是基于数组的所以add(E)、get(i)效率较高，set(i,E)、remove(i)、add(i,E)效率较低</li><li>LinkedList是基于双向链表的可动态扩展的、可存储重复元素的、非线程安全的有序集合。<br>由于是基于链表的所以add(E)、add(i,E)、set(i,E)、remove(i)效率较高，get(i)效率较低</li><li>Vector是基于数组的可动态扩展的、可存储重复元素的、线程安全的有序集合<br>由于是线程安全的所以效率比上诉的都要低</li><li>Stack(栈),继承了Vector,只有push(入栈)、pop(出栈)、peek(查看)等方法实现</li></ol><h2 id="3-HashSet、LinkedHashSet、TreeSet"><a href="#3-HashSet、LinkedHashSet、TreeSet" class="headerlink" title="3. HashSet、LinkedHashSet、TreeSet"></a>3. HashSet、LinkedHashSet、TreeSet</h2><ol><li>都是java的不可存储重复元素的集合容器,都实现了Collection、Set接口</li><li>HashSet是不重复的(hashcode去重)、非线程安全的无序集合<br>只能放一个null</li><li>LinkedHashSet是不重复的(hashcode去重)、非线程安全的有序集合</li><li>TreeSet是SortedSet唯一实现类，TreeSet可实现自定义排序(实现Comparable接口)   </li></ol><h2 id="4-HashMap、HashTable、ConcurrentHashMap、IdentityHashMap"><a href="#4-HashMap、HashTable、ConcurrentHashMap、IdentityHashMap" class="headerlink" title="4. HashMap、HashTable、ConcurrentHashMap、IdentityHashMap"></a>4. HashMap、HashTable、ConcurrentHashMap、IdentityHashMap</h2><ol><li>都是存储形如key-value集合的容器，都实现了Map接口</li><li>HashMap是非线程安全的、按key值得hashcode去重的、无序的集合, 能接受key为null</li><li>HashTable与HashTable类似，区别在于其实现了同步，效率也相较于HashMap低，不能接受key为null的情况</li><li>ConcurrentHashMap是线程安全的、引入了分割(segmentation)，不论它变得多么大，仅仅需要锁定map的某个部分，而其它的线程不需<br>要等到迭代完成才能访问map。简而言之在迭代的过程中，ConcurrentHashMap仅仅锁定map的某个部分，而Hashtable则会锁定整个map,<br>所以ConcurrentHashMap效率高于HashTable, 不能接受key为null的情况<br>ConcurrentHashMap实现锁分段技术是通过可重入锁ReentrantLock实现Segment[]分锁，每个Segment内部存放一个或多个HashEntry[]<br>每个HashEntry又是一个链表，具体的数据结构如图：<br><img src="/images/java-collection-frame/ConcurrentHashMap.png" alt="ConcurrentHashMap结构图"></li><li>IdentityHashMap基于数组的、区别于HashMap的是比较key值是比较引用相等(形如<code>object1 == object2</code>)的，HashMap是equals()<br>判断是否相等的，能接受key为null</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java GC</title>
      <link href="/post/2018/06/15/java-gc/"/>
      <url>/post/2018/06/15/java-gc/</url>
      
        <content type="html"><![CDATA[<h2 id="一-Java虚拟机内存区域"><a href="#一-Java虚拟机内存区域" class="headerlink" title="一. Java虚拟机内存区域"></a>一. Java虚拟机内存区域</h2><h3 id="1-运行时数据区"><a href="#1-运行时数据区" class="headerlink" title="1. 运行时数据区"></a>1. 运行时数据区</h3><p>   <img src="https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="java运行时数据区"></p><h3 id="2-程序计数器-Program-Counter-Register"><a href="#2-程序计数器-Program-Counter-Register" class="headerlink" title="2. 程序计数器(Program Counter Register)"></a>2. 程序计数器(Program Counter Register)</h3><ul><li>1、程序计数器是线程内(每个线程都有唯一的、封闭的)一小块内存区域</li><li>2、计数器指定的是当前虚拟机执行指令的地址</li><li>3、当虚拟机执行的是Native方法时,计数器值为空(Undefined),此内存区域是唯一一个在Java虚拟机规范中没有规定任何<code>OutOfMemoryError</code><br>   情况的区域.</li></ul><h3 id="3-Java虚拟机栈-Java-Virtual-Machine-Stacks"><a href="#3-Java虚拟机栈-Java-Virtual-Machine-Stacks" class="headerlink" title="3. Java虚拟机栈(Java Virtual Machine Stacks)"></a>3. Java虚拟机栈(Java Virtual Machine Stacks)</h3><ul><li>1、虚拟机栈是线程内部的、封闭的</li><li>2、虚拟机栈描述的是java方法执行的内存模型</li><li>3、每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、 操作数栈、 动态链接、 方法出口等信息</li><li>4、java方法的执行就是入栈与出栈的过程</li><li>5、如果虚拟机栈深度超出了虚拟机允许深度将会抛出<code>StackOverflowError</code>异常,现代虚拟机大多数支持动态扩展(也允许固定长度),当虚拟机申<br>   请扩展时申请不到足够的内存时,将会抛出<code>OutOfMemoryError</code>异常</li></ul><h3 id="4-本地方法栈-Native-Method-Stack"><a href="#4-本地方法栈-Native-Method-Stack" class="headerlink" title="4. 本地方法栈(Native Method Stack)"></a>4. 本地方法栈(Native Method Stack)</h3><ul><li>1、为虚拟机调用本地Native方法提供服务</li><li>2、也有虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一</li><li>3、也会抛出<code>StackOverflowError</code>异常和<code>OutOfMemoryError</code>异常</li></ul><h3 id="5-Java堆-Java-Heap-GC堆"><a href="#5-Java堆-Java-Heap-GC堆" class="headerlink" title="5. Java堆(Java Heap) GC堆"></a>5. Java堆(Java Heap) GC堆</h3><ul><li>1、线程共享的最大一块内存区域</li><li>2、此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存,虚拟机规范所有的对象实例与数据都在堆上分配</li><li>3、随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、 标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐<br>   变得不是那么“绝对”了</li></ul><h3 id="6-方法区-Method-Area"><a href="#6-方法区-Method-Area" class="headerlink" title="6. 方法区(Method Area)"></a>6. 方法区(Method Area)</h3><ul><li>1、存储已被虚拟机加载的类信息、 常量、 静态变量、 即时编译器编译后的代码等数据</li><li>2、这区域的内存回收目标主要是针对常量池的回收和对类型的卸载</li></ul><h3 id="7-运行时常量池-Runtime-Constant-Pool"><a href="#7-运行时常量池-Runtime-Constant-Pool" class="headerlink" title="7. 运行时常量池(Runtime Constant Pool)"></a>7. 运行时常量池(Runtime Constant Pool)</h3><ul><li>1、Class文件中除了有类的版本、 字段、 方法、 接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成<br>   的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放</li><li>2、<code>String.intern()</code>也会放入运行时常量池中</li></ul><h3 id="8-直接内存-Direct-Memory"><a href="#8-直接内存-Direct-Memory" class="headerlink" title="8. 直接内存(Direct Memory)"></a>8. 直接内存(Direct Memory)</h3><ul><li>1、NIO的DirectByteBuffer对象使用直接内存,这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据</li></ul><h2 id="二-Java对象"><a href="#二-Java对象" class="headerlink" title="二. Java对象"></a>二. Java对象</h2><h3 id="1-对象的创建"><a href="#1-对象的创建" class="headerlink" title="1. 对象的创建"></a>1. 对象的创建</h3><ul><li>1、指针碰撞(Bump the Pointer)</li><li>2、空闲列表(Free List)</li></ul><h3 id="2-对象再内存中的布局"><a href="#2-对象再内存中的布局" class="headerlink" title="2. 对象再内存中的布局"></a>2. 对象再内存中的布局</h3><ul><li>1、分为3块区域:对象头(Header)、实例数据(Instance Data)和对齐填充(Padding)</li><li>2、对象头包含:轻量级锁定、 重量级锁定、 GC标记、 可偏向</li></ul><h3 id="3-对象的访问定位"><a href="#3-对象的访问定位" class="headerlink" title="3. 对象的访问定位"></a>3. 对象的访问定位</h3><ul><li>1、句柄访问<br> <img src="https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/%E5%8F%A5%E6%9F%84%E8%AE%BF%E9%97%AE.png" alt="句柄访问对象"></li><li>2、直接指针访问<br> <img src="https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE.png" alt="直接指针访问">  </li></ul><h2 id="三-垃圾回收与内存分配"><a href="#三-垃圾回收与内存分配" class="headerlink" title="三. 垃圾回收与内存分配"></a>三. 垃圾回收与内存分配</h2><h3 id="1-引用计数法-虚拟机未使用"><a href="#1-引用计数法-虚拟机未使用" class="headerlink" title="1. 引用计数法(虚拟机未使用)"></a>1. 引用计数法(虚拟机未使用)</h3><ul><li>1、互相引用将无法得到正常回收</li></ul><h3 id="2-可达性分析算法-Reachability-Analysis"><a href="#2-可达性分析算法-Reachability-Analysis" class="headerlink" title="2. 可达性分析算法(Reachability Analysis)"></a>2. 可达性分析算法(Reachability Analysis)</h3><ul><li>1、通过GC Root节点向下搜索,搜索走过的路径称为引用链(Reference Chain),当一个对象没有一个引用链经过,则表示该对象是不可用的,可以回收</li><li>2、可作为GC Root对象的有:   <ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象 </li><li>方法区中类静态属性引用的对象  </li><li>方法区中常量引用的对象  </li><li>本地方法栈中JNI(即一般说的Native方法)引用的对象  </li></ul></li></ul><h3 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h3><ul><li>1、<strong>强引用(Strong Reference)</strong>: new 关键字</li><li>2、<strong>软引用(Soft Reference)</strong>:当要发生内存溢出时会将软引用对象加入回收队列中</li><li>3、<strong>弱引用(Weak Reference)</strong>:只能活到下次GC前</li><li>4、<strong>虚引用(Phantom Reference)</strong>:幽灵引用或者幻影引用</li></ul><h3 id="4-回收方法区"><a href="#4-回收方法区" class="headerlink" title="4. 回收方法区"></a>4. 回收方法区</h3><ul><li>1、主要回收永久代的废弃的常量和无用的类   </li><li>2、无用的类判定条件:  <ul><li>该类所有的实例都已经被回收,也就是Java堆中不存在该类的任何实例.</li><li>加载该类的ClassLoader已经被回收.</li><li>该类对应的<code>java.lang.Class</code>对象没有在任何地方被引用,无法在任何地方通过反射访问该类的方法.</li></ul></li></ul><h2 id="四-垃圾回收算法"><a href="#四-垃圾回收算法" class="headerlink" title="四. 垃圾回收算法"></a>四. 垃圾回收算法</h2><h3 id="1-标记-清除算法-Mark-Sweep"><a href="#1-标记-清除算法-Mark-Sweep" class="headerlink" title="1. 标记-清除算法(Mark-Sweep)"></a>1. 标记-清除算法(Mark-Sweep)</h3><ul><li>1、标记与清除2个过程</li><li>2、标记与清除效率都不高,还可能产生大量空间碎片导致大对象找不到连续可用的空间</li></ul><h3 id="2-复制算法-Copying"><a href="#2-复制算法-Copying" class="headerlink" title="2. 复制算法(Copying)"></a>2. 复制算法(Copying)</h3><ul><li>1、将堆内存分为大小相等的2块,每次只是用其中一块,当一块内存用完时将还活着的对象移动到另一块,然后清理该块内存</li><li>2、消除了内存碎片化,代价是牺牲了一半可用堆内存</li><li>3、商用虚拟机都采用这种,但并不是按1:1来划分空间而是将内存分为一块较大的Eden空间和两块较小的Survivor空间,每次使用Eden和其中<br>   一块Survivor.当回收时,将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上,最后清理掉Eden和刚才用过的<br>   Survivor空间. HotSpot虚拟机默认Eden和Survivor的大小比例是8:1,也就是每次新生代中可用内存空间为整个新生代容量的<br>   90%(80%+10%),只有10%的内存会被“浪费”. 当然,98%的对象可回收只是一般场景下的数据,我们没有办法保证每次回收都只有不多于<br>   10%的对象存活,当Survivor空间不够用时,需要依赖其他内存(这里指老年代)进行分配担保(Handle Promotion).</li><li>4、当存活率高时将会出现大量的内存复制操作还有可能导致进行分配担保</li></ul><h3 id="3-标记-整理算法-Mark-Compact"><a href="#3-标记-整理算法-Mark-Compact" class="headerlink" title="3. 标记-整理算法(Mark-Compact)"></a>3. 标记-整理算法(Mark-Compact)</h3><ul><li>1、老年代内存,标记可回收对象之后,将存活的对象移向一端,然后清理掉端边界以外的内存</li></ul><h3 id="4-分代收集算法-Generational-Collection"><a href="#4-分代收集算法-Generational-Collection" class="headerlink" title="4. 分代收集算法(Generational Collection)"></a>4. 分代收集算法(Generational Collection)</h3><ul><li>1、将堆内存分为老年代和新生代</li><li>2、老年代对象存活率高,再采用标记-清理或标记-整理算法进行GC</li><li>3、新生代存活率低,采用复制算法将少量的存活对象进行复制操作   </li></ul><h2 id="五-HotSpot算法实现"><a href="#五-HotSpot算法实现" class="headerlink" title="五. HotSpot算法实现"></a>五. HotSpot算法实现</h2><h3 id="1-枚举根节点"><a href="#1-枚举根节点" class="headerlink" title="1. 枚举根节点"></a>1. 枚举根节点</h3><ul><li>1、虚拟机内OopMap存有对象引用信息，可以得到GC Root根节点</li></ul><h3 id="2-安全点"><a href="#2-安全点" class="headerlink" title="2. 安全点"></a>2. 安全点</h3><ul><li>1、虚拟机会在如方法调用、 循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint</li><li>2、中断方式  <ul><li>抢先式中断(基本弃用): 给出中断指令，有线程发现未到达安全点则继续执行至下一个安全点</li><li>主动式中断: 给定一个中断标志，每个线程都会去轮询该标志，为真时中断</li></ul></li></ul><h3 id="3-安全区域"><a href="#3-安全区域" class="headerlink" title="3. 安全区域"></a>3. 安全区域</h3><ul><li>1、安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的</li><li>2、在线程执行到安全区域时首先会标记自己进入安全区域，出安全区域前必须等到枚举根节点或整个GC完成，没有则都等到可以出安全区域信号为止</li></ul><h2 id="六-垃圾回收器"><a href="#六-垃圾回收器" class="headerlink" title="六. 垃圾回收器"></a>六. 垃圾回收器</h2><p>   <img src="https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/HotSpot%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="HotSpot虚拟机垃圾回收器"></p><h3 id="1-Serial收集器"><a href="#1-Serial收集器" class="headerlink" title="1. Serial收集器"></a>1. Serial收集器</h3><ul><li>1、JDK1.3.1之前是虚拟机新生代收集的唯一选择</li><li>2、单线程、Stop The World(STW)、复制算法</li><li>3、Client模式下新生代默认的垃圾收集器</li></ul><h3 id="2-PerNew收集器"><a href="#2-PerNew收集器" class="headerlink" title="2. PerNew收集器"></a>2. PerNew收集器</h3><ul><li>1、Serial收集器的多线程版,其他一样</li><li>2、是许多虚拟机Server模式下新生代的首选收集器</li><li>3、ParNew收集器也是使用<code>-XX:+UseConcMarkSweepGC</code>选项后的默认新生代收集器,也可以使用<code>-XX:+UseParNewGC</code>选项来强制指定它</li><li>4、单核下效果不一定比Serial效果好,多核更适合,<code>-XX:ParallelGCThreads</code>参数来限制垃圾收集的线程数</li></ul><h3 id="3-Parallel-Scavenge收集器"><a href="#3-Parallel-Scavenge收集器" class="headerlink" title="3. Parallel Scavenge收集器"></a>3. Parallel Scavenge收集器</h3><ul><li>1、新生代收集器,采用复制算法,并行的多线程收集器,吞吐量优先   </li><li>2、追求可控的吞吐量, 吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)</li><li>3、控制最大垃圾收集停顿时间的<code>-XX:MaxGCPauseMillis</code>参数以及直接设置吞吐量大小的<code>-XX:GCTimeRatio</code>参数.</li></ul><h3 id="4-Serial-Old收集器"><a href="#4-Serial-Old收集器" class="headerlink" title="4. Serial Old收集器"></a>4. Serial Old收集器</h3><ul><li>1、Serial老年代版本、单线程、标记-整理算法</li><li>2、给Client模式下虚拟机用</li></ul><h3 id="5-Parallel-Old收集器"><a href="#5-Parallel-Old收集器" class="headerlink" title="5. Parallel Old收集器"></a>5. Parallel Old收集器</h3><ul><li>1、Parallel Scavenge收集器的老年代版本,使用多线程和“标记-整理”算法,JDK1.6开始提供</li></ul><h3 id="6-CMS收集器"><a href="#6-CMS收集器" class="headerlink" title="6. CMS收集器"></a>6. CMS收集器</h3><ul><li>1、CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器. </li><li>2、标记-清除算法实现  <ul><li>初始标记(CMS initial mark)，有短时的STW</li><li>并发标记(CMS concurrent mark)</li><li>重新标记(CMS remark)，有短时的STW</li><li>并发清除(CMS concurrent sweep)</li></ul></li><li>3、并发收集、 低停顿,Sun公司的一些官方文档中也称之为并发低停顿收集器</li><li>4、<code>-XX：+UseCMSCompactAtFullCollection</code>默认开启，表示CMS进行Full GC的时候开启内存碎片的合并整理，该过程无法并发停顿时间变长</li><li>5、<code>-XX：CMSFullGCsBeforeCompaction</code>表示执行多少次不压缩的Full GC后跟着来一次压缩的Full GC，默认是0，每次都压缩</li></ul><h3 id="7-G1收集器"><a href="#7-G1收集器" class="headerlink" title="7. G1收集器"></a>7. G1收集器</h3><ul><li>1、G1(Garbage-First)收集器是当今收集器技术发展的最前沿成果之一,面向服务端应用 </li><li>2、特点: <ul><li>并发与并行:充分利用cpu与多核等硬件优势</li><li>分代收集:</li><li>空间整理:标记-整理算法</li><li>可预测的停顿:将堆内存分为多个区域(Region),还保留有老年代与新生代</li></ul></li><li>3、不计算维护Remembered Set的操作,G1收集器的运作大致可划分为以下几个步骤:  <ul><li>初始标记(Initial Marking)</li><li>并发标记(Concurrent Marking)</li><li>最终标记(Final Marking)</li><li>筛选回收(Live Data Counting and Evacuation) </li></ul></li></ul><h3 id="8-垃圾收集器参数"><a href="#8-垃圾收集器参数" class="headerlink" title="8. 垃圾收集器参数"></a>8. 垃圾收集器参数</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">UseSerialGC</td><td style="text-align:left">Client模式下默认,使用Serial+Serial Old组合</td></tr><tr><td style="text-align:left">UseParNewGC</td><td style="text-align:left">ParNew+Serial Old组合</td></tr><tr><td style="text-align:left">UseConMarkSweepGC</td><td style="text-align:left">ParNew+CMS+Serial Old组合,Serial Old作为CMS失败后备用</td></tr><tr><td style="text-align:left">UseParallelGC</td><td style="text-align:left">Server模式默认,Parallel Scavenge+Serial Old(PS Mark Sweep)组合</td></tr><tr><td style="text-align:left">UseParallelOldGC</td><td style="text-align:left">Parallel Scavenge+Parallel Old组合</td></tr><tr><td style="text-align:left">UseG1GC</td><td style="text-align:left">使用G1</td></tr></tbody></table><h2 id="七-内存分配与回收策略"><a href="#七-内存分配与回收策略" class="headerlink" title="七. 内存分配与回收策略"></a>七. 内存分配与回收策略</h2><h3 id="1-对象优先在Eden分配"><a href="#1-对象优先在Eden分配" class="headerlink" title="1. 对象优先在Eden分配"></a>1. 对象优先在Eden分配</h3><ul><li>对象优先在Eden新生代分配,内存不足将发生一次Minor GC</li></ul><h3 id="2-大对象直接进入老年代"><a href="#2-大对象直接进入老年代" class="headerlink" title="2. 大对象直接进入老年代"></a>2. 大对象直接进入老年代</h3><ul><li><code>-XX:PretenureSizeThreshold</code>参数,令大于这个设置值的对象直接在老年代分配,避免大量内存复制</li></ul><h3 id="3-长期存活的对象将进入老年代"><a href="#3-长期存活的对象将进入老年代" class="headerlink" title="3. 长期存活的对象将进入老年代"></a>3. 长期存活的对象将进入老年代</h3><ul><li>对象晋升老年代的年龄阈值,可以通过参数<code>-XX:MaxTenuringThreshold</code>设置,默认15,每次Minor GC对象没死+1</li></ul><h3 id="4-动态对象年龄判定"><a href="#4-动态对象年龄判定" class="headerlink" title="4. 动态对象年龄判定"></a>4. 动态对象年龄判定</h3><ul><li>如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半,年龄大于或等于该年龄的对象就可以直接进入老年代,无须等<br>到MaxTenuringThreshold中要求的年龄</li></ul><h3 id="5-空间分配担保"><a href="#5-空间分配担保" class="headerlink" title="5. 空间分配担保"></a>5. 空间分配担保</h3><ul><li>Minor GC前先判断老年代可用空间是否大于新生代对象总空间,如果大于则确保安全,如果小于则查看HandlePromotionFailure设置的值是否<br>允许担保失败,若允许则会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小,如果大于,将尝试着进行一次Minor<br>GC,尽管这次Minor GC是有风险的;如果小于,或者HandlePromotionFailure设置不允许冒险,那这时也要改为进行一次Full GC.</li></ul><h3 id="八-Minor-GC、Major-GC与Full-GC"><a href="#八-Minor-GC、Major-GC与Full-GC" class="headerlink" title="八. Minor GC、Major GC与Full GC"></a>八. Minor GC、Major GC与Full GC</h3><ul><li>Minor GC表示新生代GC、Major GC是指老年代GC、Full GC为全部堆内存GC。</li><li>往往他们之间相互影响，相互触发</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Concurrent</title>
      <link href="/post/2018/06/15/java-concurrent/"/>
      <url>/post/2018/06/15/java-concurrent/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JAVA与线程"><a href="#1-JAVA与线程" class="headerlink" title="1. JAVA与线程"></a>1. JAVA与线程</h2><h3 id="1-1-线程的实现"><a href="#1-1-线程的实现" class="headerlink" title="1.1 线程的实现"></a>1.1 线程的实现</h3><ol><li>实现方式:使用内核线程实现、 使用用户线程实现和使用用户线程加轻量级进程混合实现.</li><li>JDK1.2之前是基于用户线程实现的，JDK1.2及以后是基于操作系统原生线程模型实现的.</li></ol><h3 id="1-2-Java线程调度"><a href="#1-2-Java线程调度" class="headerlink" title="1.2 Java线程调度"></a>1.2 Java线程调度</h3><ol><li>线程调度是指系统为线程分配处理器使用权的过程,主要调度方式有两种,分别是协同式线程调度(Cooperative Threads-Scheduling)<br>和抢占式线程调度(Preemptive ThreadsScheduling)</li><li>协同式线程调度:线程的执行时间由线程本身来控制,线程把自己的工作执行完了之后,要主动通知系统切换到另外一个线程上;<br>优点是实现简单,缺点是线程执行时间不可控制,容易线程阻塞</li><li>每个线程将由系统来分配执行时间,线程的切换不由线程本身来决定(在Java中,Thread.yield()可以让出执行时间,但是要获取执行时<br>间的话,线程本身是没有什么办法的);优点是线程的执行时间是系统可控的,也不会有一个线程导致整个进程阻塞的问题.</li><li>JAVA线程有10个优先级(Thread.MIN_PRIORITY至Thread.MAX_PRIORITY)</li></ol><h3 id="1-3-线程转换状态"><a href="#1-3-线程转换状态" class="headerlink" title="1.3 线程转换状态"></a>1.3 线程转换状态</h3><ol><li>JAVA线程定义了6个状态:  <ul><li>新建(New):创建后尚未启动的线程处于这种状态.</li><li>运行(Runable):Runable包括了操作系统线程状态中的Running和Ready,也就是处于此状态的线程有可能正在执行,也有可能正在等待着CPU为它分配执行时间.</li><li>无限期等待(Waiting):处于这种状态的线程不会被分配CPU执行时间,它们要等待被其他线程显式地唤醒. 以下方法会让线程陷入无限期的等待状态:<br>● 没有设置Timeout参数的Object.wait()方法.<br>● 没有设置Timeout参数的Thread.join()方法.<br>● LockSupport.park()方法.  </li><li>限期等待(Timed Waiting):处于这种状态的线程也不会被分配CPU执行时间,不过无须等待被其他线程显式地唤醒,在一定时间之后它们会由系统自动唤醒. 以下方法会让线程进入限期等待状态:<br>● Thread.sleep()方法.<br>● 设置了Timeout参数的Object.wait()方法.<br>● 设置了Timeout参数的Thread.join()方法.<br>● LockSupport.parkNanos()方法.<br>● LockSupport.parkUntil()方法 </li><li>阻塞(Blocked):该状态程序在等待获取一个排他锁，程序在同步时会在该状态 </li><li>结束(Terminated):已终止线程的线程状态,线程已经结束执行.</li></ul></li><li>线程状态转换关系图<br><img src="https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/concurrent/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB.png" alt="线程状态转换关系"></li></ol><h2 id="2-线程安全与锁优化"><a href="#2-线程安全与锁优化" class="headerlink" title="2. 线程安全与锁优化"></a>2. 线程安全与锁优化</h2><h3 id="2-1-JAVA中的线程安全"><a href="#2-1-JAVA中的线程安全" class="headerlink" title="2.1 JAVA中的线程安全"></a>2.1 JAVA中的线程安全</h3><ol><li>共享数据分类<ul><li>不可变(Immutable):不可变对象一定是线程安全的,典型的final</li><li>绝对线程安全:</li><li>相对线程安全: java大部分的线程安全都是相对线程安全的</li><li>线程兼容:</li><li>线程对立:</li></ul></li></ol><h3 id="2-2-synchronized的优化"><a href="#2-2-synchronized的优化" class="headerlink" title="2.2 synchronized的优化"></a>2.2 synchronized的优化</h3><ol><li>synchronized自JDK1.6后引入偏向锁和轻量级锁后大大提升了并发的性能</li><li>synchronized锁升级<code>偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</code> 所以在锁高竞争下Lock性能更高</li></ol><h2 id="3-锁介绍"><a href="#3-锁介绍" class="headerlink" title="3. 锁介绍"></a>3. 锁介绍</h2><h3 id="3-1-自旋锁"><a href="#3-1-自旋锁" class="headerlink" title="3.1 自旋锁"></a>3.1 自旋锁</h3><ol><li>自旋锁可以使线程在没有取得锁的时候，不被挂起，而转去执行一个空循环，（即所谓的自旋，就是自己执行空循环），若在若干个空循环后，线<br>程如果可以获得锁，则继续执行。若线程依然不能获得锁，才会被挂起。使用自旋锁后，线程被挂起的几率相对减少，线程执行的连贯性相对加<br>强。因此，对于那些锁竞争不是很激烈，锁占用时间很短的并发线程，具有一定的积极意义，但对于锁竞争激烈，单线程锁占用很长时间的并发<br>程序，自旋锁在自旋等待后，往往毅然无法获得对应的锁，不仅仅白白浪费了CPU时间，最终还是免不了被挂起的操作 ，反而浪费了系统的资源。<br>在JDK1.6中，Java虚拟机提供<code>-XX:+UseSpinning</code>参数来开启自旋锁，使用<code>-XX:PreBlockSpin</code>参数来设置自旋锁等待的次数。在JDK1.7<br>开始，自旋锁的参数被取消，虚拟机不再支持由用户配置自旋锁，自旋锁总是会执行，自旋锁次数也由虚拟机自动调整。  </li><li>问题：  <ul><li>可能白占用CPU时间</li><li>死锁问题，自己占用锁，还在等待锁释放</li></ul></li></ol><h3 id="3-2-阻塞锁"><a href="#3-2-阻塞锁" class="headerlink" title="3.2 阻塞锁"></a>3.2 阻塞锁</h3><ol><li>让线程进入阻塞状态进行等待，当获得相应的信号（唤醒，时间） 时，才可以进入线程的准备就绪状态，准备就绪状态的所有线程，通过竞争，进<br>入运行状态。JAVA中，能够进入\退出、阻塞状态或包含阻塞锁的方法有 ，<code>synchronized</code> 关键字（其中的重量锁），<code>ReentrantLock</code>，<br><code>Object.wait()\notify()</code></li></ol><h3 id="3-3-可重入锁"><a href="#3-3-可重入锁" class="headerlink" title="3.3 可重入锁"></a>3.3 可重入锁</h3><ol><li>可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。<br>在JAVA环境下 <code>ReentrantLock</code> 和<code>synchronized</code> 都是 可重入锁</li></ol><h3 id="3-4-乐观锁和悲观锁"><a href="#3-4-乐观锁和悲观锁" class="headerlink" title="3.4 乐观锁和悲观锁"></a>3.4 乐观锁和悲观锁</h3><ol><li>悲观锁: 每次拿数据都上锁，如行锁、表锁、读锁、写锁</li><li>乐观锁: 每次拿数据都不上锁，只是在修改前验证下数据在此期间有无更新，如版本号控制</li></ol><h3 id="3-5-轮询锁和定时锁"><a href="#3-5-轮询锁和定时锁" class="headerlink" title="3.5 轮询锁和定时锁"></a>3.5 轮询锁和定时锁</h3><ol><li>由tryLock实现，与无条件获取锁模式相比，它们具有更完善的错误恢复机制。可避免死锁的发生：<br><code>boolean tryLock()</code>:仅在调用时锁为空闲状态才获取该锁。如果锁可用，则获取锁，并立即返回值true。如果锁不可用，则此方法将立即返回值false。<br><code>boolean tryLock(long time, TimeUnit unit) throws InterruptedException</code>:如果锁在给定的等待时间内空闲，并且当前线程未被中断，则获取锁。</li></ol><h3 id="3-6-显示锁和内置锁"><a href="#3-6-显示锁和内置锁" class="headerlink" title="3.6 显示锁和内置锁"></a>3.6 显示锁和内置锁</h3><ol><li>显示锁用<code>Lock</code>来定义、内置锁用<code>synchronized</code>。</li></ol><h3 id="3-7-对象锁和类锁"><a href="#3-7-对象锁和类锁" class="headerlink" title="3.7 对象锁和类锁"></a>3.7 对象锁和类锁</h3><ol><li>对象锁是用于实例对象(可有多个实例对象)方法上的</li><li>类锁是作用于对象的静态方法和Class(一个类只有一个Class对象)对象上的</li></ol><h3 id="3-8-互斥锁"><a href="#3-8-互斥锁" class="headerlink" title="3.8 互斥锁"></a>3.8 互斥锁</h3><ol><li>互斥锁, 指的是一次最多只能有一个线程持有的锁。如Java的Lock</li></ol><h3 id="3-9-锁粗化"><a href="#3-9-锁粗化" class="headerlink" title="3.9 锁粗化"></a>3.9 锁粗化</h3><ol><li>将多个连续的锁操作合并成一个整体的锁</li></ol><h3 id="3-10-锁消除"><a href="#3-10-锁消除" class="headerlink" title="3.10 锁消除"></a>3.10 锁消除</h3><ol><li>通过逃逸分析，能证明堆上数据不会逃逸出当前线程，则认为是线程安全的，不必要加锁操作</li></ol><h2 id="4-java线程池"><a href="#4-java线程池" class="headerlink" title="4. java线程池"></a>4. java线程池</h2><h3 id="4-1-线程池实现类"><a href="#4-1-线程池实现类" class="headerlink" title="4.1 线程池实现类"></a>4.1 线程池实现类</h3><pre><code>   (C)ThreadPoolExecutor --&gt;  (AC)AbstractExecutorService --&gt; (I)ExecutorService --&gt; (I)Executor</code></pre><h3 id="4-2-ThreadPoolExecutor构造参数说明"><a href="#4-2-ThreadPoolExecutor构造参数说明" class="headerlink" title="4.2 ThreadPoolExecutor构造参数说明"></a>4.2 ThreadPoolExecutor构造参数说明</h3><pre><code>    // corePoolSize 核心线程数，当任务多于核心线程数时会进入缓冲阻塞队列workQueue    // maximunPoolSize 线程池最大线程数    // keepAliveTime 多于核心线程数的空闲线程最长存活时间量级与unit参数配合使用    // unit 线程等待时间的单位级    // workQueue 任务缓冲队列    // threadFactory 线程工厂，用于创建线程    // handler 表示拒接处理任务的策略有一下4种：    //  - ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常    //  - ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常    //  - ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）    //  - ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,            BlockingQueue&lt;Runnable&gt; workQueue);    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,            BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory);    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,            BlockingQueue&lt;Runnable&gt; workQueue,RejectedExecutionHandler handler);    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,        BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler);</code></pre><h3 id="4-3-实现原理"><a href="#4-3-实现原理" class="headerlink" title="4.3 实现原理"></a>4.3 实现原理</h3><ol><li>线程池状态：  </li></ol><ul><li><strong>RUNNING</strong>: 线程池初始化时就是RUNNING状态，表示线程池能够接受任务并处理，并且线程池中线程数默认为0(可以通过调用方法<br><code>prestartAllCoreThreads() #创建核心线程</code>或者<code>prestartCoreThread() #创建一个核心线程</code>来初始化线程数)</li><li><strong>SHUTDOWN</strong>: 线程处于SHUTDOWN状态时,不接收新任务,但能处理已添加的任务;状态切换调用<code>shutdown()</code>时从<code>RUNNING-&gt; SHUTDOWN</code></li><li><strong>STOP</strong>: 线程处于STOP状态时，不接收新任务，不处理已添加任务，并会终止正在执行的任务;状态切换调用<code>shutdownNow()</code>时从<br><code>RUNNING or SHUTDOWN -&gt; STOP</code></li><li><strong>TIDYING</strong>: 当所有任务已终止，任务数量为0时，线程池会进入TIDYING状态，并且会执行钩子函数<code>terminated()</code>，用户可重载该方法<br>实现自己的业务逻辑;状态切换是所有任务终止就进入TIDYING状态</li><li><strong>TERMINATED</strong>: 线程池彻底终止状态;状态切换是TIDYING的钩子函数执行完毕后进入TERMINATED状态</li></ul><ol start="2"><li>任务执行过程</li></ol><ul><li>当任务提交给线程池时，线程首先判断当前池内线程数是否大于corePoolSize(核心线程数)，如果小于这值就会创建一个新的线程来执行该任务；</li><li>当线程数大于核心线程数时，则会尝试将任务放入缓冲队列(workQueue)内，若添加成功，则该任务会被等待的空闲线程取去执行，若添加失败，<br>则会尝试创建新的线程去执行该任务；</li><li>如果线程池内线程数达到了maximumPoolSize(最大线程数)时，则会采取handler(拒绝策略)处理</li><li>如果线程池内的线程数大于corePoolSize时，当线程空闲超时keepAliveTime时，线程将被终止，直到线程数等于corePoolSize；如果允许核心<br>线程数也有超时时间，则当核心线程数内的线程超时时也会被终止，直至线程数为0</li></ul><ol start="3"><li>线程池中的线程初始化</li></ol><ul><li><code>prestartCoreThread()</code>：初始化一个核心线程</li><li><code>prestartAllCoreThreads()</code>：初始化所有核心线程</li><li>初始化后线程会执行workQueue的<code>take()</code>方法，该方法是阻塞的，直到有任务提交</li></ul><ol start="4"><li>任务缓存队列及排队策略</li></ol><ul><li><strong>ArrayBlockingQueue</strong>：基于数组的FIFO阻塞队列,必须有最大容量的参数</li><li><strong>LinkedBlockingQueue</strong>: 基于链表的FIFO阻塞队列,容量动态扩展</li><li><strong>SynchronousQueue</strong>: 该队列不保存提交的任务，而是直接新建队列来执行任务</li></ul><ol start="5"><li><p>任务拒绝策略</p><pre><code>ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</code></pre></li><li><p>线程池的关闭</p></li></ol><ul><li><code>shutdown()</code>：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务 </li><li><code>shutdownNow()</code>: 立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务</li></ul><ol start="7"><li>线程池容量动态调整</li></ol><ul><li><code>setCorePoolSize()</code>：设置核心池大小</li><li><code>setMaximumPoolSize()</code>：设置线程池最大能创建的线程数目大小</li></ul><h3 id="4-4-Executors"><a href="#4-4-Executors" class="headerlink" title="4.4 Executors"></a>4.4 Executors</h3><ul><li><strong>newFixedThreadPool</strong>: 定容量的线程池，核心线程数与最大线程数相等</li><li><strong>newSingleThreadExecutor</strong>: 单线程线程池，线程池内核心线程数与最大线程数为1</li><li><strong>newCachedThreadPool</strong>: 无线大小线程池，核心线程数为0，最大线程数为<code>Integer.MAX_VALUE</code>, 缓冲队列为<code>SynchronousQueue</code></li><li><strong>newScheduledThreadPool</strong>：创建一个ScheduledThreadPoolExecutor定时执行线程池,最大线程数为<code>Integer.MAX_VALUE</code>,内部是<br>一个DelayedWorkQueue实现</li><li><strong>newSingleThreadScheduledExecutor</strong>: 创建一个ScheduledThreadPoolExecutor定时执行线程池,最大线程数为<code>Integer.MAX_VALUE</code>,<br>内部是一个DelayedWorkQueue实现  </li></ul><h2 id="5-AbstractQueuedSynchronizer"><a href="#5-AbstractQueuedSynchronizer" class="headerlink" title="5. AbstractQueuedSynchronizer"></a>5. AbstractQueuedSynchronizer</h2><p>   内部类：</p><ul><li>ConditionObject：</li><li>Node：存放线程信息队列</li></ul><h3 id="5-1-AQS之ReentrantLock独占锁源码分析"><a href="#5-1-AQS之ReentrantLock独占锁源码分析" class="headerlink" title="5.1 AQS之ReentrantLock独占锁源码分析"></a>5.1 AQS之ReentrantLock独占锁源码分析</h3><ul><li><a href="http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer" target="_blank" rel="noopener">AbstractQueuedSynchronizer独占锁</a></li><li><code>ReentrantLock.lock()</code>保证在<code>ReentrantLock.unlock()</code>之间的代码只有一个线程在执行；ReentrantLock为可重入锁，它有一个与<br>锁相关的获取计数器，如果拥有锁的某个线程再次得到锁，那么获取计数器就加1，然后锁需要被释放两次才能获得真正释放。</li><li>内部类<code>Syn</code>实现了<code>AbstractQueuedSynchronizer</code>接口</li><li>构造方法有公平锁和非公平锁，公平锁与非公平锁的区别在于公平锁在尝试获取锁时会放入等待队列的后面，获取锁的顺序是按先后顺序执行的，<br>而非公平锁在尝试获取锁时首先会去尝试获取锁，若获取失败在进入等待队列按顺序执行。</li></ul><h3 id="5-2-AQS之CountDownLatch共享锁源码分析"><a href="#5-2-AQS之CountDownLatch共享锁源码分析" class="headerlink" title="5.2 AQS之CountDownLatch共享锁源码分析"></a>5.2 AQS之CountDownLatch共享锁源码分析</h3><ul><li><a href="http://www.infoq.com/cn/articles/java8-abstractqueuedsynchronizer" target="_blank" rel="noopener">AbstractQueuedSynchronizer共享锁</a></li><li><code>CountDownLatch.countDown()</code>实现锁计数-1，直到减至0是，唤醒<code>CountDownLatch.await()</code>等待线程</li></ul><h3 id="5-3-公平锁和非公平锁"><a href="#5-3-公平锁和非公平锁" class="headerlink" title="5.3 公平锁和非公平锁"></a>5.3 公平锁和非公平锁</h3><p>   公平锁是严格按照FIFO队列获得锁，但带来了大量的线程切换的消耗，非公平锁极大的降低了线程切换带来的消耗，虽然可能造成线程饥饿的情况，但也提高了吞吐量。</p><h2 id="6-synchronized与Lock比较"><a href="#6-synchronized与Lock比较" class="headerlink" title="6. synchronized与Lock比较"></a>6. synchronized与Lock比较</h2><ol><li><code>synchronized</code>是JVM层面实现的’重量级锁’，可通过监控工具监控<code>synchronized</code>的锁定，而且代码出现异常时会自动释放锁</li><li><code>Lock</code>是纯JAVA实现的，为多种实现留下空间，可以实现不同的调度算法、性能特性或者锁定语义，<code>Lock</code>必须自己手动的释放锁<br>形如<code>finally{lock.unlock();}</code></li><li>当锁竞争激烈时用<code>Lock</code>,锁竞争较弱时用<code>synchronized</code></li></ol><h2 id="7-阻塞队列BlockingQueue"><a href="#7-阻塞队列BlockingQueue" class="headerlink" title="7. 阻塞队列BlockingQueue"></a>7. 阻塞队列BlockingQueue</h2><ol><li>阻塞队列是一个FIFO队列</li><li>主要方法   </li></ol><table><thead><tr><th style="text-align:center">Ops</th><th style="text-align:center">Throws Exception</th><th style="text-align:center">Special Value</th><th style="text-align:center">Blocks Times Out</th></tr></thead><tbody><tr><td style="text-align:center">Insert</td><td style="text-align:center">add(o)</td><td style="text-align:center">offer(o)</td><td style="text-align:center">put(o) &amp; offer(o, timeout, timeUnit)</td></tr><tr><td style="text-align:center">Remove</td><td style="text-align:center">remove(o)</td><td style="text-align:center">poll()</td><td style="text-align:center">take()    &amp; poll(timeout, timeUnit)</td></tr><tr><td style="text-align:center">Examine</td><td style="text-align:center">element()</td><td style="text-align:center">peek()</td><td style="text-align:center">-</td></tr></tbody></table><ol start="3"><li>主要实现  </li></ol><ul><li><strong>ArrayBlockingQueue</strong>：基于数组的有界阻塞队列，必须指定长度</li><li><strong>LinkedBlockingQueue</strong>: 基于链表的有界阻塞队列，长度可指定也可动态扩张，默认长度为<code>Integer.MAX_VALUE</code></li><li><strong>SynchronousQueue</strong>: 无缓冲区的阻塞队列，<code>put()</code>要阻塞等待<code>take()</code></li><li><strong>PriorityBlockingQueue</strong>: 优先级阻塞队列，队列元素必须实现<code>Comparator</code>接口，基于数组，自动扩展长度</li><li><strong>DelayQueue</strong>：一个使用优先级队列实现的无界阻塞队列</li><li><strong>LinkedTransferQueue</strong>：一个由链表结构组成的无界阻塞队列</li><li><strong>LinkedBlockingDeque</strong>：一个由链表结构组成的双向阻塞队列</li></ul><ol start="4"><li>注意<br>如果是无界阻塞队列，队列不可能会出现满的情况，所以使用put或offer方法永远不会被阻塞，而且使用offer方法时，该方法永远返回true。</li></ol><h2 id="8-ConcurrentLinkedQueue"><a href="#8-ConcurrentLinkedQueue" class="headerlink" title="8. ConcurrentLinkedQueue"></a>8. ConcurrentLinkedQueue</h2><p>   非阻塞线程安全的FIFO队列，基于单向链表实现，循环CAS操作实现，由于是根据Node.NEXT是否为NULL来判断是否为TAIL节点，因此队列的元素值不可为NULL。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrent </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Memory Model</title>
      <link href="/post/2018/06/15/java-memory-model/"/>
      <url>/post/2018/06/15/java-memory-model/</url>
      
        <content type="html"><![CDATA[<h2 id="1-内存模型-JMM"><a href="#1-内存模型-JMM" class="headerlink" title="1. 内存模型(JMM)"></a>1. 内存模型(JMM)</h2><p> <img src="https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/concurrent/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png" alt="内存模型"></p><h2 id="2-内存间的交互操作"><a href="#2-内存间的交互操作" class="headerlink" title="2. 内存间的交互操作"></a>2. 内存间的交互操作</h2><h3 id="2-1-定义操作"><a href="#2-1-定义操作" class="headerlink" title="2.1. 定义操作"></a>2.1. 定义操作</h3><ul><li><strong>lock(锁定)</strong>：作用于主内存的变量,它把一个变量标识为一条线程独占的状态.</li><li><strong>unlock(解锁</strong>)：作用于主内存的变量,它把一个处于锁定状态的变量释放出来,释放后的变量才可以被其他线程锁定.</li><li><strong>read(读取</strong>)：作用于主内存的变量,它把一个变量的值从主内存传输到线程的工作内存中,以便随后的load动作使用.</li><li><strong>load(载入)</strong>：作用于工作内存的变量,它把read操作从主内存中得到的变量值放入工作内存的变量副本中.</li><li>use(使用)：作用于工作内存的变量,它把工作内存中一个变量的值传递给执行引擎,每当虚拟机遇到一个需要使用到<br>变量的值的字节码指令时将会执行这个操作.</li><li><strong>assign(赋值)</strong>：作用于工作内存的变量,它把一个从执行引擎接收到的值赋给工作内存的变量,每当虚拟机遇到一个<br>给变量赋值的字节码指令时执行这个操作.</li><li><strong>store(存储)</strong>：作用于工作内存的变量,它把工作内存中一个变量的值传送到主内存中,以便随后的write操作使用.</li><li><strong>write(写入)</strong>：作用于主内存的变量,它把store操作从工作内存中得到的变量的值放入主内存的变量中.</li></ul><h3 id="2-2-约束条件"><a href="#2-2-约束条件" class="headerlink" title="2.2. 约束条件"></a>2.2. 约束条件</h3><ol><li>read和load、store和write必须保证顺序操作,不能单独出现,但不需要连续操作,中间可隔有其他操作</li><li>不允许一个线程丢弃它的最近的assign操作,即变量在工作内存中改变了之后必须把该变化同步回主内存.</li><li>不允许一个线程无原因地(没有发生过任何assign操作)把数据从线程的工作内存同步回主内存中.</li><li>一个新的变量只能在主内存中“诞生”,不允许在工作内存中直接使用一个未被初始化(load或assign)的变量,换句话说,<br>就是对一个变量实施use、 store操作之前,必须先执行过了assign和load操作.</li><li>一个变量在同一个时刻只允许一条线程对其进行lock操作,但lock操作可以被同一条线程重复执行多次,多次执行lock后,<br>只有执行相同次数的unlock操作,变量才会被解锁</li><li>如果对一个变量执行lock操作,那将会清空工作内存中此变量的值,在执行引擎使用这个变量前,<br>需要重新执行load或assign操作初始化变量的值.</li><li>如果一个变量事先没有被lock操作锁定,那就不允许对它执行unlock操作,也不允许去unlock一个被其他线程锁定住的变量.</li><li>对一个变量执行unlock操作之前,必须先把此变量同步回主内存中(执行store、 write操作)</li></ol><h3 id="2-3-volatile"><a href="#2-3-volatile" class="headerlink" title="2.3. volatile"></a>2.3. volatile</h3><p>   &emsp;&emsp;假定T表示一个线程,V和W分别表示两个volatile型变量,那么在进行read、 load、 use、 assign、store和write操作时<br>   需要满足如下规则:<br>   &emsp;&emsp;只有当线程T对变量V执行的前一个动作是load的时候,线程T才能对变量V执行use动作;并且,只有当线程T对变量V执行的后一个动作是use<br>   的时候,线程T才能对变量V执行load动作. 线程T对变量V的use动作可以认为是和线程T对变量V的load、 read动作相关联,必须连续一起出现<br>   (这条规则要求在工作内存中,每次使用V前都必须先从主内存刷新最新的值,用于保证能看见其他线程对变量V所做的修改后的值).<br>   &emsp;&emsp;只有当线程T对变量V执行的前一个动作是assign的时候,线程T才能对变量V执行store动作;并且,只有当线程T对变量V执行的后一个动作<br>   是store的时候,线程T才能对变量V执行assign动作. 线程T对变量V的assign动作可以认为是和线程T对变量V的store、 write动作相关<br>   联,必须连续一起出现(这条规则要求在工作内存中,每次修改V后都必须立刻同步回主内存中,用于保证其他线程可以看到自己对变量V所做的修改)<br>   &emsp;&emsp;假定动作A是线程T对变量V实施的use或assign动作,假定动作F是和动作A相关联的load或store动作,假定动作P是和动作F相应的对变量V<br>   的read或write动作;类似的,假定动作B是线程T对变量W实施的use或assign动作,假定动作G是和动作B相关联的load或store动作,假定动作<br>   Q是和动作G相应的对变量W的read或write动作. 如果A先于B,那么P先于Q(这条规则要求volatile修饰的变量不会被指令重排序优化,保证代<br>   码的执行顺序与程序的顺序相同).<br>   &emsp;&emsp;volatile不仅保证了共享变量的可见性，还通过内存屏障保证了代码执行顺序与程序顺序相同，通过内存屏障来使变量不被指令重排优化</p><h3 id="2-4-long和double的非原子性协定"><a href="#2-4-long和double的非原子性协定" class="headerlink" title="2.4. long和double的非原子性协定"></a>2.4. long和double的非原子性协定</h3><p>  读写操作可分为2次32位操作,所以一定不是原子操作<br>  <strong><em>注：现在商用虚拟机本身几乎都已经实现了原子操作,所以不用volatile修饰符</em></strong></p><h3 id="2-5-原子性"><a href="#2-5-原子性" class="headerlink" title="2.5 原子性"></a>2.5 原子性</h3><p>  变量操作的read、load、use、assign、store、write不保证了原子性<br>  通过synchronized对lock、unlock操作也保证了原子性</p><h3 id="2-6-可见性"><a href="#2-6-可见性" class="headerlink" title="2.6 可见性"></a>2.6 可见性</h3><p>  volatile保证在读取共享变量之前去主内存刷最新值，还保证了最新值能及时同步至主内存</p><h3 id="2-7-有序性"><a href="#2-7-有序性" class="headerlink" title="2.7 有序性"></a>2.7 有序性</h3><p>  在本线程内观察所有操作都是有序的，在另一个线程观察所有操作都是无序的</p><h3 id="2-8-先发性"><a href="#2-8-先发性" class="headerlink" title="2.8 先发性"></a>2.8 先发性</h3><p>  先发生的线程对修改了共享变量的值、发送了消息或调用了方法会被后发生的线程所观察到  </p><h3 id="2-9-先行发生-happens-before-规则"><a href="#2-9-先行发生-happens-before-规则" class="headerlink" title="2.9 先行发生(happens-before)规则"></a>2.9 先行发生(happens-before)规则</h3><p>   《JSR-133:Java Memory Model and Thread Specification》定义了如下happens-before规则。 </p><ul><li>1、程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。</li><li>2、监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li><li>3、volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li><li>4、传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</li><li>5、start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。</li><li>6、join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。</li></ul><h2 id="3-常见比较"><a href="#3-常见比较" class="headerlink" title="3. 常见比较"></a>3. 常见比较</h2><h3 id="3-1-volatile与synchronized比较"><a href="#3-1-volatile与synchronized比较" class="headerlink" title="3.1 volatile与synchronized比较"></a>3.1 volatile与synchronized比较</h3><ul><li>1、被volatile描述的共享变量通过内存屏障是代码不被指令重排优化，从而保证了共享变量在线程间的可见性，更新变量时会及时<br>的将最新值同步至主内存，读变量时会及时的去主内存获取最新值，volatile只能修饰变量，只保证可见性，不保证原子性，不能用来<br>同步。</li><li>2、synchronized是通过对象头的锁标志位来实现加锁与释放锁，不仅保证可见性，还保证了原子性，只有获得了对象锁的线程才能<br>进入临界区，其他线程会阻塞等待锁释放后再争抢锁。</li></ul><h3 id="3-2-Lock-ReentrantLock-与synchronized比较"><a href="#3-2-Lock-ReentrantLock-与synchronized比较" class="headerlink" title="3.2 Lock(ReentrantLock)与synchronized比较"></a>3.2 Lock(ReentrantLock)与synchronized比较</h3><ul><li>1、synchronized是JAVA关键字，Lock是一个java接口，ReentrantLock实现了该接口</li><li>2、Lock锁需要在finally{}代码里手动释放，synchronized会自动释放锁</li><li>3、Lock根据实现不同有多种锁类型，如公平锁、非公平锁(默认非公平锁)</li><li>4、性能方面，在锁竞争很大的情况下Lock性能更优于synchronized</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JMM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA Monitor Tools</title>
      <link href="/post/2018/06/14/java-monitor-tools/"/>
      <url>/post/2018/06/14/java-monitor-tools/</url>
      
        <content type="html"><![CDATA[<h2 id="一-jps-JVM-Process-Status-Tool"><a href="#一-jps-JVM-Process-Status-Tool" class="headerlink" title="一. jps(JVM Process Status Tool)"></a>一. jps(JVM Process Status Tool)</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>   类似UNIX的ps命令，列出虚拟机正在运行的进程信息</p><h3 id="2-参数"><a href="#2-参数" class="headerlink" title="2. 参数"></a>2. 参数</h3><ul><li><strong>-q</strong>: 只输出进程ID</li><li><strong>-m</strong>: 输出主类启动时的参数</li><li><strong>-l</strong>: 输出主类全名，如果是jar则输出jar路径</li><li><strong>-v</strong>: 输出虚拟机启动时的JVM参数</li></ul><h2 id="二-jstat-JVM-Statistics-Monitoring-Tool"><a href="#二-jstat-JVM-Statistics-Monitoring-Tool" class="headerlink" title="二. jstat(JVM Statistics Monitoring Tool)"></a>二. jstat(JVM Statistics Monitoring Tool)</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>   用于监视虚拟机各种运行状态信息的命令行工具。 它可以显示本地或者远程虚拟机进程中的类装载、 内存、 垃圾收集、 JIT编译等运行数据 </p><h3 id="2-格式"><a href="#2-格式" class="headerlink" title="2. 格式"></a>2. 格式</h3><p>   jstat[option vmid[interval[s|ms][count]]]<br>   如<strong><code>jstat -class 14232(PID) 520(采样率) 4(采样次数)</code></strong></p><h3 id="3-参数"><a href="#3-参数" class="headerlink" title="3. 参数"></a>3. 参数</h3><ul><li><strong>-class</strong>: 监控类加载数量、卸载数量、总空间以及加载所用时间</li><li><strong>-gc</strong>: 监控java堆状态，包括Eden区，2个survivor区，老年代，永久代容量、已用空间、GC时间合计等</li><li><strong>-gccapacity</strong>: 与-gc基本相同，但主要关注java堆各个区域使用到的最大、最小空间</li><li><strong>-gcutil</strong>: 与-gc基本相同，但主要关注java堆各个区域使用占比</li><li><strong>-gccase</strong>: 与-gcutil一样，但会额外输出上一次GC的原因</li><li><strong>-gcnew</strong>: 监控新生代GC状态</li><li><strong>-gcnewcapacity</strong>: 与-gcnew基本相同，但主要关注的是使用到的最大、最小空间</li><li><strong>-gcold</strong>: 监控老年代GC状态</li><li><strong>-gcoldcapacity</strong>: 与-gcold基本相同，但主要关注的是使用道的最大、最小空间</li><li><strong>-gcpermcapacity</strong>: 输出永久带使用到的最大、最小空间</li><li><strong>-compiler</strong>: 输出JIT编译过的方法、耗时等信息</li><li><strong>-printcompilation</strong>: 输出已被JIT编译过的方法</li></ul><h2 id="三-jinfo-Configuration-Info-for-Java"><a href="#三-jinfo-Configuration-Info-for-Java" class="headerlink" title="三. jinfo(Configuration Info for Java)"></a>三. jinfo(Configuration Info for Java)</h2><h3 id="1-介绍-2"><a href="#1-介绍-2" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>   实时地查看和调整虚拟机各项参数</p><h3 id="2-格式-1"><a href="#2-格式-1" class="headerlink" title="2. 格式"></a>2. 格式</h3><p>   jinfo [option] pid 如 <code>jinfo -flags 14232</code></p><h3 id="3-参数-1"><a href="#3-参数-1" class="headerlink" title="3. 参数"></a>3. 参数</h3><ul><li><strong>-flag &lt;name&gt;</strong>: to print the value of the named VM flag. (输出JVM参数名为name的参数信息)</li><li><strong>-flag +/-&lt;name&gt;</strong>: to enable or disable the named VM flag. (添加或除去JVM参数名为name的参数)</li><li><strong>-flag &lt;name&gt;=&lt;value&gt;</strong>: to set the named VM flag to the given value. (设置JVM参数， 如-Xmx=1024m)</li><li><strong>-flags</strong>: to print VM flags. (输出JVM启动参数信息)</li><li><strong>-sysprops</strong>: to print Java system properties. (输出<code>System.getProperties()</code>信息)</li></ul><h2 id="四-jmap-Memory-Map-for-Java"><a href="#四-jmap-Memory-Map-for-Java" class="headerlink" title="四. jmap(Memory Map for Java)"></a>四. jmap(Memory Map for Java)</h2><h3 id="1-介绍-3"><a href="#1-介绍-3" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>   命令用于生成堆转储快照(一般称为heapdump或dump文件)<br>   其他生成dump文件方式:通过参数<code>-XX：+HeapDumpOnOutOfMemoryError</code>OOM时生成、<code>-XX：+HeapDumpOnCtrlBreak</code>通过<br>   [Ctrl]+[Break]键让虚拟机生成dump文件、或者Linux通过命令kill -3 pid也能拿到dump</p><h3 id="2-格式-2"><a href="#2-格式-2" class="headerlink" title="2. 格式"></a>2. 格式</h3><p>   jmap [option] vmid </p><h3 id="3-参数-2"><a href="#3-参数-2" class="headerlink" title="3. 参数"></a>3. 参数</h3><ul><li><strong>-dump</strong>: 生成java堆转存快照, 格式 <code>-dump:[live, ],format=b,file=&lt;filename&gt;</code>, live表示是否只导出存活的对象</li><li><strong>-finalizerinfo</strong>: 显示在F-Queen里面等待Finalizer线程执行finalize()方法的对象，只在Linux/Solaris平台有效</li><li><strong>-heap</strong>: 显示java堆详细信息，如使用哪种GC回收器，参数配置、分代状况等信息，只在Linux/Solaris平台有效</li><li><strong>-histo</strong>: 显示堆中对象统计信息，包括类、实例数量及合计容量等</li><li><strong>-permstat</strong>: 以ClassLoader为统计口径显示永久带内存状态，只在Linux/Solaris平台有效</li><li><strong>-F</strong>: 当-dump没响应时，使用-F强制生成dump文件，只在Linux/Solaris平台有效</li></ul><h2 id="五-jhat-JVM-Heap-Analysis-Tool"><a href="#五-jhat-JVM-Heap-Analysis-Tool" class="headerlink" title="五. jhat(JVM Heap Analysis Tool)"></a>五. jhat(JVM Heap Analysis Tool)</h2><h3 id="1-介绍-4"><a href="#1-介绍-4" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>   分析jmap生成的堆转储快照(dump文件)</p><h3 id="2-格式-3"><a href="#2-格式-3" class="headerlink" title="2. 格式"></a>2. 格式</h3><p>   jhat [-port 7001] &lt;dumpfile&gt;</p><h3 id="3-参数-3"><a href="#3-参数-3" class="headerlink" title="3. 参数"></a>3. 参数</h3><ul><li><strong>-port</strong>: server端口，可通过host:port访问</li><li><strong>&lt;file&gt;</strong>: dump文件</li><li><strong>-J&lt;flag&gt;</strong>: 运行参数,如: <code>-J-mx512m</code></li></ul><h2 id="六-jstack-Stack-Trace-for-Java"><a href="#六-jstack-Stack-Trace-for-Java" class="headerlink" title="六. jstack(Stack Trace for Java)"></a>六. jstack(Stack Trace for Java)</h2><h3 id="1-介绍-5"><a href="#1-介绍-5" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>   用于生成虚拟机当前时刻的线程快照(一般称为threaddump或者javacore文件)<br>   线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，<br>   如线程间死锁、 死循环、 请求外部资源导致的长时间等待等都是导致线程长时间停顿的常见原因。 线程出现停顿的时候通过<br>   jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做些什么事情，或者等待着什么资源</p><h3 id="2-格式-4"><a href="#2-格式-4" class="headerlink" title="2. 格式"></a>2. 格式</h3><p>   jstack [option] vmid 如<code>jstack -l 14232</code></p><h3 id="3-参数-4"><a href="#3-参数-4" class="headerlink" title="3. 参数"></a>3. 参数</h3><ul><li><strong>-F</strong>: 当正常请求无响应时，强制输出线程堆栈</li><li><strong>-l</strong>: 除堆栈外，显示关于锁的附加信息</li><li><strong>-m</strong>: 如果调用到本地方法时，显示C/C++堆栈信息</li></ul><h3 id="4-日志分析"><a href="#4-日志分析" class="headerlink" title="4. 日志分析"></a>4. 日志分析</h3><ol><li>线程分为New、Runnable、Running、Waiting、Timed_Waiting、Blocked、Dead等状态  <ul><li><strong>New</strong>: 当线程对象创建时存在的状态，此时线程不可能执行；  </li><li><strong>Runnable</strong>：当调用thread.start()后，线程变成为Runnable状态。只要得到CPU，就可以执行；  </li><li><strong>Running</strong>：线程正在执行；  </li><li><strong>Waiting</strong>：执行thread.join()或在锁对象调用obj.wait()等情况就会进该状态，表明线程正处于等待某个资源或条件发生来唤醒自己；  </li><li><strong>Timed_Waiting</strong>：执行Thread.sleep(long)、thread.join(long)或obj.wait(long)等就会进该状态，与Waiting的区别在于Timed_Waiting的等待有时间限制；  </li><li><strong>Blocked</strong>：如果进入同步方法或同步代码块，没有获取到锁，则会进入该状态；  </li><li><strong>Dead</strong>：线程执行完毕，或者抛出了未捕获的异常之后，会进入dead状态，表示该线程结束  </li></ul></li><li>其次，对于jstack日志，我们要着重关注如下关键信息  <ul><li><strong>Deadlock</strong>：表示有死锁  </li><li><strong>Waiting on condition</strong>：等待某个资源或条件发生来唤醒自己。具体需要结合jstacktrace来分析，比如线程正在sleep，网络读写繁忙而等待  </li><li><strong>Blocked</strong>：阻塞  </li><li><strong>Waiting on monitor entry</strong>：在等待获取锁  </li><li><strong>in Object.wait()</strong>：获取锁后又执行obj.wait()放弃锁  </li><li>对于Waiting on monitor entry 和 inObject.wait()的详细描述：Monitor是 Java中用以实现线程之间的互斥与协作的主要手段，<br>它可以看成是对象或者Class的锁。每一个对象都有，也仅有一个 monitor。从下图中可以看出，每个 Monitor在某个时刻，只能被一个<br>线程拥有，该线程就是 “Active Thread”，而其它线程都是 “Waiting Thread”，分别在两个队列 “Entry Set”和 “Wait Set”里面<br>等候。在 “Entry Set”中等待的线程状态是”Waiting for monitor entry”，而在 “Wait Set”中等待的线程状态是 “in Object.wait()”</li></ul></li></ol><h3 id="5-附录"><a href="#5-附录" class="headerlink" title="5. 附录"></a>5. 附录</h3><p>   在JDK1.5中在<code>java.lang.Thread</code>类中新增了<code>getAllStackTraces()</code>方法获取虚拟机所有的线程<code>StackTraceElement</code><br>   对象，实现了大部分jstack功能，实际项目中可页面展示</p><h2 id="七-VisualVM-All-in-One-Java-Troubleshooting-Tool"><a href="#七-VisualVM-All-in-One-Java-Troubleshooting-Tool" class="headerlink" title="七. VisualVM(All-in-One Java Troubleshooting Tool)"></a>七. VisualVM(All-in-One Java Troubleshooting Tool)</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  是到目前为止随JDK发布的功能最强大的运行监视和故障处理程序，并且可以预见在未来一段时间内都是官方主力发展的虚拟机故障处理工具。<br>  官方在VisualVM的软件说明中写上了“All-in-One”的描述字样，预示着它除了运行监视、 故障处理外，还提供了很多其他方面的功能。</p><h3 id="远程监控"><a href="#远程监控" class="headerlink" title="远程监控"></a>远程监控</h3><ul><li>1、远程服务器启动jstatd服务<br>创建配置文件jstatd.policy内容为  <pre><code>grant codebase &quot;file:${java.home}/../lib/tools.jar&quot; {     permission java.security.AllPermission;  };</code></pre>启动服务:<code>jstatd -J-Djava.security.policy=jstatd.policy -p 8701</code></li><li>2、启动应用参数<pre><code>-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=9090 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false-Djava.rmi.server.hostname=192.168.0.1</code></pre></li><li>3、启动jvisualvm,操作步骤:<br>远程 -&gt; 添加远程主机 -&gt; 添加JMX链接</li></ul><h2 id="八-案列"><a href="#八-案列" class="headerlink" title="八. 案列"></a>八. 案列</h2><h3 id="1-利用jstack调试线程堆栈信息"><a href="#1-利用jstack调试线程堆栈信息" class="headerlink" title="1. 利用jstack调试线程堆栈信息"></a>1. 利用jstack调试线程堆栈信息</h3><ol><li>jps得到PID，如14232</li><li>查看进程PID的线程耗时情况,命令<code>ps -Lfp pid</code>或<code>top -Hp pid</code>找到最耗时的线程ID 如14253</li><li>获取线程ID16进制编码<code>print &quot;%x\n&quot; 14253</code>为37ad</li><li>用jstack获取线程堆栈信息<code>jstack 14232 |grep 37ad</code>打印如下信息:<br><code>&quot;VM Periodic Task Thread&quot; os_prio=0 tid=0x00007f772c00f800 nid=0x37ad waiting on condition</code><br>通过该日志分析表示该线程在等待某个资源来唤醒</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java Monitor </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
